{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Super JSS \u2014 Atomic CSS\u2011in\u2011JS for Angular 20","text":"<p>Super JavaScript Stylesheets (SJSS) is a lightweight, runtime styling library for Angular 20 that generates atomic CSS on the fly using Angular Signals. It delivers responsive breakpoints, theming (palette, typography, spacing), and pseudo\u2011selectors \u2014 without shipping a giant utility bundle.</p> <ul> <li>\u26a1 Angular\u2011native: Built on Signals for instant reactive styling</li> <li>\ud83c\udfaf Atomic CSS generation: Only the CSS you actually use</li> <li>\ud83d\udcf1 Theming + responsive: Semantic palette, scales, and <code>xs\u2026xxl</code> breakpoints</li> <li>\ud83c\udfa8 Pseudo\u2011selectors: <code>&amp;:hover</code>, <code>&amp;:focus</code>, etc.</li> <li>\ud83e\udde9 Shorthands &amp; helpers: <code>sj.sh.bg('primary')</code>, <code>sj.flex.center()</code>, <code>sj.grid.cols(3)</code></li> <li>\ud83c\udfd7\ufe0f Components: <code>&lt;sj-box&gt;</code>, <code>&lt;sj-card&gt;</code>, <code>&lt;sj-button&gt;</code>, <code>&lt;sj-typography&gt;</code>, <code>&lt;sj-icon&gt;</code></li> <li>\ud83c\udfa8 Blueprints: Pre-configured style objects for common UI patterns</li> <li>\ud83d\ude80 Performance: Bundled classes, memoized styles, zero runtime overhead</li> </ul> <p>Documentation: https://sjss.dev Demo &amp; lib workspace: https://stackblitz.com/~/github.com/rsantoyo-dev/super-jss-workspace NPM: https://www.npmjs.com/package/super-jss</p>"},{"location":"#why-sjss-the-complete-styling-solution","title":"Why SJSS? The Complete Styling Solution","text":"<p>Traditional CSS-in-JS libraries ship massive bundles with every possible utility class. SJSS generates only the atomic CSS you use, keeping your bundle tiny while providing full theming and responsiveness.</p>"},{"location":"#core-features","title":"Core Features","text":""},{"location":"#advanced-theming-tokens","title":"\ud83c\udfa8 Advanced Theming &amp; Tokens","text":"<p>SJSS includes a complete design system with colors, spacing, typography, and breakpoints.</p> <pre><code>// Colors: semantic palette + full color scales\nsj.css.backgroundColor(sj.tokens.palette.primary.main)\nsj.css.color(sj.tokens.colors.blue[500])\n\n// Spacing: consistent scales\nsj.css.padding(sj.tokens.spacing(2)) // 16px\n\n// Typography: variants\n&lt;sj-typography variant=\"h1\"&gt;Title&lt;/sj-typography&gt;\n\n// Breakpoints: responsive objects\n[sj]=\"{ p: { xs: 1, md: 2, lg: 3 } }\"\n</code></pre>"},{"location":"#powerful-shorthands","title":"\ud83d\ude80 Powerful Shorthands","text":"<p>Common properties have short aliases:</p> <pre><code>sj.sh.bg('primary.main')    // backgroundColor\nsj.sh.p(2)                  // padding\nsj.sh.m({ xs: 1, md: 2 })   // margin (responsive)\nsj.sh.c('neutral.dark')     // color\nsj.sh.w('100%')             // width\nsj.sh.h(200)                // height\nsj.sh.brad(0.5)             // borderRadius\nsj.sh.gap(1)                // gap\n</code></pre>"},{"location":"#layout-helpers","title":"\ud83d\udcd0 Layout Helpers","text":"<p>Powerful flexbox and grid utilities:</p> <pre><code>// Flexbox\nsj.flex.center()           // d:flex, justify:center, align:center\nsj.flex.column({ gap: 1 }) // d:flex, fxDir:column, gap:1\nsj.flex.between()          // d:flex, fxJustify:space-between\n\n// Grid\nsj.grid.container()        // d:grid\nsj.grid.cols(3)            // gridTemplateColumns: repeat(3, 1fr)\nsj.grid.columns('1fr 2fr') // custom columns\nsj.grid.gap(1)             // gap:1\n\n// Stack (opinionated flex)\nsj.stack({ direction: 'row', gap: 0.5, align: 'center' })\n</code></pre>"},{"location":"#pseudo-selectors","title":"\ud83c\udfaf Pseudo-Selectors","text":"<p>Style interactions with pseudo-selectors:</p> <pre><code>[sj]=\"{ \n  bg: 'light.main',\n  '&amp;:hover': { bg: 'primary.main' },\n  '&amp;:focus': { outline: '2px solid blue' },\n  '&amp;:active': { transform: 'scale(0.98)' }\n}\"\n</code></pre> <p>Or use helpers:</p> <pre><code>sj.hover({ bg: 'primary.dark' })\nsj.focus({ outline: '2px solid blue' })\nsj.active({ transform: 'scale(0.95)' })\n</code></pre>"},{"location":"#pre-built-components","title":"\ud83e\udde9 Pre-built Components","text":"<p>Ready-to-use components with variants:</p> <pre><code>&lt;sj-box [sj]=\"sj.flex.center()\"&gt;...&lt;/sj-box&gt;\n&lt;sj-card variant=\"elevated\" [sj]=\"customStyles\"&gt;...&lt;/sj-card&gt;\n&lt;sj-button variant=\"contained\"&gt;Click me&lt;/sj-button&gt;\n&lt;sj-typography variant=\"h2\"&gt;Heading&lt;/sj-typography&gt;\n&lt;sj-icon name=\"star\" [sj]=\"iconStyle\"&gt;&lt;/sj-icon&gt;\n</code></pre>"},{"location":"#blueprints-system","title":"\ud83c\udfa8 Blueprints System","text":"<p>Pre-configured style objects for common UI patterns:</p> <pre><code>import { boxBlueprints, buttonBlueprints } from 'super-jss';\n\n// Use pre-built styles\n[sj]=\"[boxBlueprints.card, customStyles]\"\n[sj]=\"buttonBlueprints.primary\"\n</code></pre>"},{"location":"#performance-features","title":"\u26a1 Performance Features","text":"<ul> <li>Atomic CSS: Generates only used styles</li> <li>Bundled classes: Single class per style object</li> <li>Memoized rendering: Avoids redundant computations</li> <li>Signals integration: Reactive updates without overhead</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>SJSS uses camelCase CSS properties with responsive breakpoint objects. Apply styles via the <code>[sj]</code> directive:</p> <p>Component (TypeScript):</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective } from 'super-jss';\n\n@Component({\n  standalone: true,\n  selector: 'app-hero',\n  imports: [SjDirective],\n  template: `\n    &lt;div [sj]=\"{ \n      display: 'flex', \n      justifyContent: 'center', \n      padding: { xs: 1, md: 2 }, \n      backgroundColor: 'primary.main',\n      '&amp;:hover': { backgroundColor: 'primary.dark' }\n    }\"&gt;\n      &lt;h1 [sj]=\"{ color: 'primary.contrast', fontWeight: '600' }\"&gt;Hello SJSS&lt;/h1&gt;\n    &lt;/div&gt;\n  `,\n})\nexport class HeroComponent {}\n</code></pre> <p>Template (HTML with Angular directives):</p> <pre><code>&lt;div [sj]=\"{ \n  display: 'flex', \n  justifyContent: 'center', \n  padding: { xs: 1, md: 2 }, \n  backgroundColor: 'primary.main',\n  '&amp;:hover': { backgroundColor: 'primary.dark' }\n}\"&gt;\n  &lt;h1 [sj]=\"{ color: 'primary.contrast', fontWeight: '600' }\"&gt;Hello SJSS&lt;/h1&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"#theming-example","title":"Theming Example","text":"<p>Here's a clean theming example showcasing SJSS components with different color schemes:</p> <pre><code>&lt;sj-box [sj]=\"containerStyle\"&gt;\n  &lt;sj-typography variant=\"h2\"&gt;SJSS Theming&lt;/sj-typography&gt;\n\n  &lt;sj-box [sj]=\"gridStyle\"&gt;\n    &lt;sj-card variant=\"elevated\" [sj]=\"primaryCardStyle\"&gt;\n      &lt;sj-typography variant=\"h5\"&gt;Primary Theme&lt;/sj-typography&gt;\n      &lt;sj-typography variant=\"body\"&gt;Clean and professional design&lt;/sj-typography&gt;\n      &lt;sj-button variant=\"contained\" [sj]=\"primaryButtonStyle\"&gt;Primary Action&lt;/sj-button&gt;\n    &lt;/sj-card&gt;\n\n    &lt;sj-card variant=\"outlined\" [sj]=\"secondaryCardStyle\"&gt;\n      &lt;sj-typography variant=\"h5\"&gt;Secondary Theme&lt;/sj-typography&gt;\n      &lt;sj-typography variant=\"body\"&gt;Subtle and elegant styling&lt;/sj-typography&gt;\n      &lt;sj-button variant=\"outlined\" [sj]=\"secondaryButtonStyle\"&gt;Secondary Action&lt;/sj-button&gt;\n    &lt;/sj-card&gt;\n\n    &lt;sj-card [sj]=\"accentCardStyle\"&gt;\n      &lt;sj-typography variant=\"h5\"&gt;Accent Theme&lt;/sj-typography&gt;\n      &lt;sj-typography variant=\"body\"&gt;Bold and eye-catching&lt;/sj-typography&gt;\n      &lt;sj-button variant=\"text\" [sj]=\"accentButtonStyle\"&gt;Accent Action&lt;/sj-button&gt;\n    &lt;/sj-card&gt;\n  &lt;/sj-box&gt;\n&lt;/sj-box&gt;\n</code></pre>"},{"location":"#installation-setup","title":"Installation &amp; Setup","text":"<ul> <li>Installation Guide: Your first step to transforming your Angular styling workflow.</li> <li>Basic Usage: Learn the fundamentals of SJSS styling.</li> <li>Responsive Design: Master responsive breakpoints and layouts.</li> <li>Theming Guide: Create beautiful, consistent themes.</li> <li>Typography: Control text styling with precision.</li> <li>Spacing: Use the spacing system effectively.</li> <li>Styling Shortcuts: Boost productivity with shorthand properties.</li> <li>API Reference: Complete API documentation.</li> </ul>"},{"location":"#blueprint-documentation","title":"Blueprint Documentation","text":"<ul> <li>Box Blueprint: Flexible container layouts</li> <li>Card Blueprints: Content container styles</li> <li>Button Blueprints: Interactive button styles</li> <li>Typography Blueprints: Text styling functions</li> </ul>"},{"location":"#component-documentation","title":"Component Documentation","text":"<ul> <li>Box Component: Flexible container component</li> <li>Card Component: Content containers with variants</li> <li>Button Component: Interactive button components</li> <li>Typography Component: Text styling components</li> <li>Icon Component: Icon components</li> <li>Host Component: Base component wrapper</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<p>Join a growing community of developers pushing the boundaries of Angular styling. Connect, share, and contribute:</p> <ul> <li>\ud83c\udf1f Star us on GitHub: Super JSS on GitHub</li> <li>\ud83d\udce6 Install via npm: Super JSS on npm</li> <li>\ud83d\udee0\ufe0f Try live on StackBlitz: Super JSS on StackBlitz</li> </ul>"},{"location":"#additional-resources","title":"Additional Resources","text":"<ul> <li>Articles by Richard on Medium</li> </ul>"},{"location":"#demos","title":"\ud83c\udfa8 Demos","text":"<p>This interactive demo provides a hands-on experience with the powerful theming capabilities of SuperJSS. Here's what you can explore:</p> <ul> <li>Live Theme Switching: Use the theme selector in the header to switch between different pre-built themes (e.g., Default, Desert, Ocean) and even a custom theme. Notice how the application's entire look and feel changes instantly.</li> <li>Dynamic Color Palette: The \"Palette\" section showcases the theme's color palette, including primary, secondary, tertiary, and other semantic colors. These colors automatically update when you switch themes.</li> <li> <p>Adaptive Typography: The \"Typography\" section demonstrates how headings, paragraphs, and other text elements adapt to the new theme's typography settings.</p> <p> </p> </li> </ul>"},{"location":"#support","title":"\ud83d\udc96\u2615 Support","text":"<p>If Super JSS empowers your projects, consider supporting its continued development:</p> <ul> <li>\u2615 \u2615 \u2615 Buy me a coffee</li> </ul>"},{"location":"#contact","title":"\ud83d\udcec Contact","text":"<p>For inquiries, feedback, or issues, reach out at ricardo.santoyo@hotmail.com.</p>"},{"location":"basic-usage/","title":"Basic Usage and Core Concepts","text":"<p>Super JSS streamlines the application of dynamic styles in Angular 20 applications. This guide provides a detailed overview of importing and using the <code>SjDirective</code>, complemented by basic examples to illustrate its practical application, including its on-the-fly CSS generation and support for pseudo-selectors.</p>"},{"location":"basic-usage/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Importing <code>SjDirective</code></li> <li>Applying <code>SjDirective</code></li> <li>Composing Styles with Arrays</li> <li>Pseudo-selectors</li> <li>Responsive Styling Example</li> <li>Further Resources</li> </ol>"},{"location":"basic-usage/#importing-sjdirective","title":"Importing <code>SjDirective</code>","text":""},{"location":"basic-usage/#import-the-directive","title":"Import the Directive","text":"<p>To integrate Super JSS into your Angular component, start by importing <code>SjDirective</code>:</p> <pre><code>import { SjDirective } from \"super-jss\";\n</code></pre>"},{"location":"basic-usage/#applying-sjdirective","title":"Applying <code>SjDirective</code>","text":""},{"location":"basic-usage/#apply-the-directive","title":"Apply the Directive","text":"<p><code>SjDirective</code> can be applied to any HTML element in your Angular template. It accepts either a single object or an array of objects for style definitions. SJSS automatically generates and injects CSS classes into the DOM only as needed, keeping your application lean and fast.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-demo',\n  template: `\n    &lt;div [sj]=\"{ p: 2, bg: 'primary.main', color: 'primary.contrast' }\"&gt;\n      Welcome to Super JSS!\n    &lt;/div&gt;\n  `\n})\nexport class DemoComponent {}\n</code></pre>"},{"location":"basic-usage/#composing-styles-with-arrays","title":"Composing Styles with Arrays","text":"<p>One of the powerful features of SJSS is the ability to compose styles by providing an array of <code>SjStyle</code> objects to the <code>[sj]</code> directive. This allows you to create reusable \"JavaScript classes\" (which are essentially just <code>SjStyle</code> objects) and combine them dynamically.</p> <p>This approach promotes modularity, reusability, and makes managing complex style sets much more intuitive. Styles from later objects in the array will override properties from earlier ones if there are conflicts.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective, SjStyle } from 'super-jss';\n\n// Define reusable style objects (your \"JS classes\")\nconst myPadding: SjStyle = { p: 2 };\nconst myResponsiveMargin: SjStyle = { m: { xs: 2, md: 4 } };\nconst myBorder: SjStyle = { border: '1px solid #ccc', borderRadius: '4px' };\nconst myShadow: SjStyle = { boxShadow: '0 2px 4px rgba(0,0,0,0.1)' };\n\n@Component({\n  standalone: true,\n  selector: 'app-composed-styles-demo',\n  template: `\n    &lt;div [sj]=\"[myPadding, myResponsiveMargin, myBorder, myShadow, { bg: 'lightblue' }]\"&gt;\n      This div uses composed styles!\n    &lt;/div&gt;\n    &lt;div [sj]=\"[myPadding, myShadow, { color: 'red' }]\"&gt;\n      Another div with different composition.\n    &lt;/div&gt;\n  `,\n})\nexport class ComposedStylesDemoComponent {\n  // Make them available in the template\n  protected readonly myPadding = myPadding;\n  protected readonly myResponsiveMargin = myResponsiveMargin;\n  protected readonly myBorder = myBorder;\n  protected readonly myShadow = myShadow;\n}\n</code></pre> <p>In this example, <code>myPadding</code>, <code>myResponsiveMargin</code>, <code>myBorder</code>, and <code>myShadow</code> are reusable <code>SjStyle</code> objects. They are combined in an array passed to <code>[sj]</code>, allowing for flexible and dynamic styling composition.</p>"},{"location":"basic-usage/#pseudo-selectors","title":"Pseudo-selectors","text":"<p>SJSS supports CSS pseudo-selectors using the <code>&amp;:</code> syntax within your style objects. This allows you to define styles for states like hover, focus, or active directly within your <code>[sj]</code> attribute.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-button-demo',\n  template: `\n    &lt;button [sj]=\"{\n      p: 1,\n      bg: 'secondary.main',\n      color: 'secondary.contrast',\n      borderRadius: '4px',\n      cursor: 'pointer',\n      transition: 'all 0.2s ease-in-out',\n      '&amp;:hover': {\n        bg: 'secondary.dark',\n        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n      },\n      '&amp;:active': {\n        transform: 'scale(0.98)'\n      }\n    }\"&gt;\n      Click Me\n    &lt;/button&gt;\n  `\n})\nexport class ButtonDemoComponent {}\n</code></pre>"},{"location":"basic-usage/#responsive-styling-example","title":"Responsive Styling Example","text":"<p>SJSS makes responsive design intuitive. You can define different style values for various breakpoints (e.g., <code>xs</code>, <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, <code>xxl</code>) directly within your style properties.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-responsive-div',\n  template: `\n    &lt;div [sj]=\"{\n      p: { xs: 1, md: 2, lg: 3 }, /* Padding changes based on screen size */\n      bg: { xs: 'red', md: 'blue', lg: 'green' }, /* Background color changes */\n      fontSize: { xs: 1, md: 1.5, lg: 2 }\n    }\"&gt;\n      This div adapts to screen size!\n    &lt;/div&gt;\n  `\n})\nexport class ResponsiveDivComponent {}\n</code></pre>"},{"location":"basic-usage/#further-resources","title":"Further Resources","text":"<p>For more information and advanced examples of using Super JSS, explore the following resources: - Super JSS on npm: Detailed package information and installation guide. - Super JSS Demos on StackBlitz: Interactive examples to understand Super JSS features better.</p> <p>\u2b05\ufe0f Previous: Installation | Next: Styling Shortcuts \u27a1\ufe0f</p>"},{"location":"colors/","title":"Color Palette and Theming","text":"<p>Super JavaScript Stylesheets (SJSS) provides a flexible and powerful system for managing color palettes in Angular applications. Utilizing the SJSS color palette, you can define and apply a consistent color scheme throughout your app.</p>"},{"location":"colors/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Using the Color Palette</li> <li>Personalizing the Color Palette</li> <li>Color Palette Default Reference</li> </ol>"},{"location":"colors/#using-the-color-palette","title":"Using the Color Palette","text":"<p>In SJSS, colors can be accessed and used within components, either through direct styling or as part of responsive and shorthand styles. Here's an example of how to use the color palette in a component:</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-colorful-component',\n    template: `\n      &lt;div [sj]=\"{ m: '2rem', p: '1rem', bg: 'blue.500' }\"&gt;\n       &lt;div [sj]=\"{ bg: 'orange.300', color: 'orange.contrast' }\"&gt;\n        This is a colorful component!\n       &lt;/div&gt;        \n      &lt;/div&gt;\n    `\n  })\n  export class ColorfulComponent {}\n\n</code></pre> <p>in this example, we're using the color palette to apply a background color to a div. We're also using the color palette to apply a background color and text color to a nested div.</p>"},{"location":"colors/#personalize-the-color-palette","title":"Personalize the Color Palette","text":"<p>The color palette can be accessed and modified through the <code>SjThemeService</code>. This service provides a powerful and user-friendly way to customize the color palette in your Angular application. Once set, these colors are automatically recognized across the application through the <code>SjDirective</code>, ensuring a seamless and consistent experience.</p> <p>Any palette item is defined as:</p> <pre><code>  {\n    50: string,\n    100: string,\n    200: string,\n    300: string,\n    400: string,\n    500: string, // Default shade\n    600: string,\n    700: string,\n    800: string,\n    900: string,\n    contrast: string\n  } \n</code></pre> <p>to update a color, please use the <code>setTheme</code> method from the <code>SjThemeService</code> as follows:</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective, SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-palette-update-demo',\n  template: `\n    &lt;button (click)=\"updateColors()\" [sj]=\"{ p: 1, bg: 'primary.main', color: 'primary.contrast', borderRadius: '4px', cursor: 'pointer' }\"&gt;\n      Update Pink Color\n    &lt;/button&gt;\n  `\n})\n\nexport class PaletteUpdateDemoComponent {\n  constructor(private sjTheme: SjThemeService) {}\n  updateColors(): void {\n    this.sjTheme.setTheme({\n      colors: {\n        pink: {\n          50: '#dc3545',\n          100: '#d8bbd0',\n          200: '#d48fb1',\n          300: '#fd06292',\n          400: '#fc407a',\n          500: '#f91e63',\n          600: '#a81b60',\n          700: '#82185b',\n          800: '#8d1457',\n          900: '#680e4f',\n          contrast: '#d59242'\n        }\n      }\n    });\n  }\n}\n\n</code></pre>"},{"location":"colors/#color-palette-default-reference","title":"Color Palette Default Reference","text":"Color 50 100 200 300 400 500 (default) 600 700 800 900 Contrast Blue #E3F2FD #BBDEFB #90CAF9 #64B5F6 #42A5F5 #3498DB #2E86C1 #1976D2 #1565C0 #0D47A1 #c26d29 Indigo #E8EAF6 #C5CAE9 #9FA8DA #7986CB #5C6BC0 #3F51B5 #3949AB #303F9F #283593 #1A237E #f59242 Purple #F3E5F5 #E1BEE7 #CE93D8 #BA68C8 #AB47BC #9C27B0 #8E24AA #7B1FA2 #6A1B9A #4A148C #f59242 Pink #FCE4EC #F8BBD0 #F48FB1 #F06292 #EC407A #E91E63 #D81B60 #C2185B #AD1457 #880E4F #f59242 Red #FFEBEE #FFCDD2 #EF9A9A #E57373 #EF5350 #E74C3C #E53935 #D32F2F #C62828 #771010 #f59242 Orange #FFF3E0 #FFE0B2 #FFCC80 #FFB74D #FFA726 #F39C12 #FB8C00 #F57C00 #EF6C00 #bb4600 #f59242 Yellow #FFFDE7 #FFF9C4 #FFF59D #FFF176 #FFEE58 #FFEB3B #FDD835 #FBC02D #F9A825 #F57F17 #f59242 Green #E8F5E9 #C8E6C9 #A5D6A7 #81C784 #66BB6A #4CAF50 #43A047 #388E3C #2E7D32 #1B5E20 #f59242 Teal #E0F2F1 #B2DFDB #80CBC4 #4DB6AC #26A69A #009688 #00897B #00796B #00695C #004D40 #f59242 Cyan #E0F7FA #B2EBF2 #80DEEA #4DD0E1 #26C6DA #00BCD4 #00ACC1 #0097A7 #00838F #006064 #f59242 Gray #FAFAFA #F5F5F5 #EEEEEE #E0E0E0 #BDBDBD #9E9E9E #757575 #616161 #424242 #212121 #f59242 Black - - - - - #000000 - - - - - <p>\u2b05\ufe0f Previous: Styling Shortcuts | Next: Spacing \u27a1\ufe0f</p>"},{"location":"examples/","title":"SuperJSS Examples","text":"<p>Explore various examples to understand the capabilities and usage of SuperJSS.</p> <ul> <li>Demo App: this Project can be seen in StackBlitz,   ## Interactive Theming Demo</li> </ul> <p>This interactive demo provides a hands-on experience with the powerful theming capabilities of SuperJSS. Here's what you can explore:</p> <ul> <li>Live Theme Switching: Use the theme selector in the header to switch between different pre-built themes (e.g., Default, Desert, Ocean) and even a custom theme. Notice how the application's entire look and feel changes instantly.</li> <li>Dynamic Color Palette: The \"Palette\" section showcases the theme's color palette, including primary, secondary, tertiary, and other semantic colors. These colors automatically update when you switch themes.</li> <li> <p>Adaptive Typography: The \"Typography\" section demonstrates how headings, paragraphs, and other text elements adapt to the new theme's typography settings.</p> <p> </p> </li> </ul>"},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<p>StackBlitz: Basic Usage Example</p> <p>This example demonstrates the basic usage of SuperJSS to create responsive designs.</p>"},{"location":"examples/#flex-box-responsive-demo","title":"Flex-box Responsive Demo","text":"<p>This interactive demo showcases how to leverage SuperJSS to create responsive flex-box layouts. Explore the code to see how <code>[sj]</code> attributes are used to define flexible and adaptive UI components.</p> <p>\u2190 Theming | Home </p>"},{"location":"faqs/","title":"FAQs \u2014 Super JSS (SJSS)","text":"<p>This FAQ consolidates the most common questions about Super JavaScript Stylesheets for Angular. If something is missing, open an issue \u2014 we\u2019ll add it.</p>"},{"location":"faqs/#basics","title":"Basics","text":"<ul> <li>Q: What is SJSS in one sentence?</li> <li> <p>A: A tiny, Angular\u2011native CSS\u2011in\u2011JS approach that turns JavaScript style objects into atomic CSS classes at runtime, with theming, responsive breakpoints, and pseudo\u2011selectors.</p> </li> <li> <p>Q: Is SJSS the same as inline styles?</p> </li> <li>A: No. You author JS objects, but SJSS emits real CSS classes and injects them once (deduped). You get proper cascade, media queries, and pseudo\u2011selectors (like <code>:hover</code>, <code>:focus</code>).</li> <li> <p>See also: Basic Usage</p> </li> <li> <p>Q: What Angular versions are supported?</p> </li> <li>A: Angular 20 for best results (Signals). Signals\u2011based reactivity is optimized for 20+.</li> </ul>"},{"location":"faqs/#tailwind-material-other-tools","title":"Tailwind / Material / Other Tools","text":"<ul> <li>Q: Isn\u2019t Tailwind enough?</li> <li>A: Tailwind is great, but ships a huge utility set whether you use it or not (you purge, but you still carry mental overhead). SJSS generates only what you use on demand. It\u2019s also very natural in Angular templates with Signals and typed configs.</li> <li> <p>See also: Basic Usage, Responsive Styling</p> </li> <li> <p>Q: Do I need Angular Material?</p> </li> <li> <p>A: No. Use SJSS alone or combine them: SJSS for layout, tokens, and dynamic theming; Material for ready\u2011made components if you like.</p> </li> <li> <p>Q: How does SJSS compare to styled\u2011components or Emotion?</p> </li> <li>A: Those are component\u2011scoped CSS\u2011in\u2011JS for React. SJSS is Angular\u2011native, atomic, and signal\u2011driven. Similar flexibility (theming, pseudo\u2011selectors), different ecosystem and ergonomics.</li> </ul>"},{"location":"faqs/#how-it-works","title":"How It Works","text":"<ul> <li>Q: How do I write styles?</li> <li>A: Provide a style object (or an array of objects to compose) to <code>[sj]</code>. Numeric values go through the theme\u2019s <code>spacing()</code>; strings pass through unchanged and can reference theme tokens.</li> </ul> <p>```html  </p> <p>```   - See also: Basic Usage, Styling Shortcuts, Examples</p> <ul> <li>Q: What are the class names like?</li> <li>A: Atomic and predictable: <code>sj-{kebab-prop}-{value}</code>. Responsive: <code>sj-{prop}-{bp}-{value}</code>. Pseudo\u2011variant prefixes: <code>hover-sj-{prop}-{value}</code>.</li> </ul> <p>Examples:   - <code>sj-bg-primary_main</code>   - <code>sj-p-md-2</code>   - <code>hover-sj-c-secondary_dark</code>   - See also: Basic Usage</p> <ul> <li>Q: What tokens can I use for colors?</li> <li>A: Palette (<code>primary.main</code>, <code>primary.dark</code>, <code>primary.contrast</code>, etc.) and scales (<code>blue.500</code>, <code>green.300</code>). Hex/rgb/hsl strings also work.</li> <li> <p>See also: Colors, Palette</p> </li> <li> <p>Q: What shorthands are available?</p> </li> <li>A: Padding/margin (<code>p, px, py, pt, pr, pb, pl, m, mx, my, mt, mr, mb, ml</code>), sizes (<code>w, h, minW, maxW, minH, maxH</code>), borders (<code>b, bt, br, bb, bl, bs, bw, bc, brad</code>), colors (<code>bg, c</code>), flexbox (<code>d, fxDir, fxWrap, fxFlow, fxJustify, fxAItems, fxAContent, fxOrder, fxGrow, fxShrink, fxBasis, fxASelf</code>).</li> <li> <p>See also: Styling Shortcuts</p> </li> <li> <p>Q: How do responsive values work?</p> </li> <li>A: Provide an object with keys in your theme breakpoints (<code>xs, sm, md, lg, xl, xxl</code>). Each key emits a min\u2011width media rule.</li> <li>See also: Responsive Styling</li> </ul>"},{"location":"faqs/#theming-typography","title":"Theming &amp; Typography","text":"<ul> <li>Q: How do I set or update the theme?</li> <li>A: Inject <code>SjThemeService</code> and call <code>setTheme(partialTheme)</code>. It deep\u2011merges, clears CSS cache, and re\u2011applies.</li> </ul> <p><code>ts   constructor(private th: SjThemeService) {}   toggleDark() { this.isDark = !this.isDark; this.th.setTheme(this.isDark ? desertDarkTheme : defaultTheme); }</code>   - See also: Theming</p> <ul> <li>Q: Can I pre\u2011configure a theme?</li> <li>A: Yes, provide <code>SJ_THEME</code> with a theme at bootstrap/component level to set defaults.</li> <li> <p>See also: Theming</p> </li> <li> <p>Q: Does SJSS apply default typography?</p> </li> <li>A: Yes. The directive auto\u2011applies default typography for tags like <code>H1\u2026H6, P, SPAN, STRONG, BODY, CAPTION, SMALL</code>. Your <code>[sj]</code> styles merge on top.</li> <li> <p>See also: Typography</p> </li> <li> <p>Q: How do I opt out of auto typography?</p> </li> <li>A: Options:<ul> <li>Override via <code>[sj]</code> (e.g., set your own <code>fontSize</code>, <code>lineHeight</code>, etc.).</li> <li>Use a wrapper element that doesn\u2019t match the auto tags.</li> <li>Define a neutral <code>typography.default</code> in your theme.</li> </ul> </li> <li>See also: Typography</li> </ul>"},{"location":"faqs/#units-values-and-gotchas","title":"Units, Values, and Gotchas","text":"<ul> <li>Q: Why is my <code>zIndex: 10</code> becoming <code>10rem</code>?</li> <li>A: Numbers are interpreted via <code>spacing()</code> (by design). For unitless props (e.g., <code>zIndex</code>, <code>lineHeight</code>, <code>fontWeight</code>, <code>opacity</code>, <code>order</code>, <code>flexGrow</code>, <code>flexShrink</code>) pass strings: <code>'10'</code>, <code>'600'</code>, <code>'1.4'</code>.</li> <li> <p>See also: Spacing</p> </li> <li> <p>Q: Can I use raw CSS values?</p> </li> <li>A: Yes. Any string is emitted as\u2011is: <code>'2px solid'</code>, <code>'100%'</code>, <code>'calc(100vh - 64px)'</code>, <code>'rgba(0,0,0,.1)'</code>.</li> <li> <p>See also: Basic Usage</p> </li> <li> <p>Q: Pseudo\u2011selectors support?</p> </li> <li>A: Supported via nested <code>&amp;:</code> keys (e.g., <code>&amp;:hover</code>, <code>&amp;:focus</code>). Complex combinators like <code>&amp; &gt; *</code> or <code>&amp; + *</code> are not supported yet.</li> <li> <p>See also: Styling Shortcuts</p> </li> <li> <p>Q: Custom media queries?</p> </li> <li>A: SJSS generates min\u2011width media queries based on your theme\u2019s <code>breakpoints</code>. When you update the theme via <code>SjThemeService.setTheme({ breakpoints: ... })</code>, the CSS cache is cleared and rules are regenerated \u2014 so the new breakpoint values take effect automatically. Arbitrary media features (e.g., <code>print</code>, <code>prefers-reduced-motion</code>, <code>orientation</code>) are not supported yet.</li> <li>See also: Responsive Styling</li> </ul>"},{"location":"faqs/#performance-css-output","title":"Performance &amp; CSS Output","text":"<ul> <li>Q: How big does the CSS get?</li> <li> <p>A: Only what you use. Rules are deduped by class name and appended to a single <code>&lt;style data-sjss&gt;</code> tag. If you generate many unique values (e.g., hundreds of unique pixel values), you\u2019ll grow the sheet accordingly.</p> </li> <li> <p>Q: How is reactivity handled?</p> </li> <li> <p>A: Angular Signals. Breakpoint and theme changes re\u2011render affected elements and reuse cached classes.</p> </li> <li> <p>Q: How do I clear the CSS?</p> </li> <li>A: Theme changes call <code>clearCache()</code> automatically. You can inject <code>SjCssGeneratorService</code> and call <code>clearCache()</code> manually if needed.</li> <li>See also: Theming</li> </ul>"},{"location":"faqs/#ssr-browser-support","title":"SSR &amp; Browser Support","text":"<ul> <li>Q: Does SSR work?</li> <li> <p>A: Client\u2011side is fully supported. SSR/Prerender is on the roadmap: collect generated CSS during server render, inline it with a nonce, and hydrate cache on the client to avoid flashes/duplication.</p> </li> <li> <p>Q: Browser support?</p> </li> <li>A: Evergreen browsers. No autoprefixer is bundled; modern CSS works as passed through. Add prefixes manually in style strings if you need legacy support.</li> </ul>"},{"location":"faqs/#interop-best-practices","title":"Interop &amp; Best Practices","text":"<ul> <li>Q: Can I use SJSS with Tailwind/Material/any CSS?</li> <li> <p>A: Yes. SJSS only adds classes; you can mix frameworks freely.</p> </li> <li> <p>Q: Will classes collide with mine?</p> </li> <li> <p>A: Class names are namespaced with <code>sj-</code> and include property/value segments. Collisions are unlikely. Specificity is low (single class) \u2014 apply order controls which wins.</p> </li> <li> <p>Q: How to avoid over\u2011generation?</p> </li> <li>A: Prefer tokens (<code>blue.500</code>, <code>primary.main</code>) and spacing units instead of many ad\u2011hoc pixel strings. Reuse composed style objects and arrays (e.g., <code>sjCard()</code> helpers).</li> <li> <p>See also: Styling Shortcuts, Colors, Spacing</p> </li> <li> <p>Q: Sticky header example?</p> </li> <li>A:   ```html  </li> </ul> <p>```   - See also: Examples</p> <ul> <li>Q: Dynamic theme toggle?</li> <li>A:   <code>ts   isDark = false;   constructor(private th: SjThemeService) {}   toggle() { this.isDark = !this.isDark; this.th.setTheme(this.isDark ? desertDarkTheme : defaultTheme); }</code></li> <li>See also: Theming</li> </ul>"},{"location":"faqs/#testing-troubleshooting","title":"Testing &amp; Troubleshooting","text":"<ul> <li>Q: How do I test styles?</li> <li> <p>A: In unit tests, render the element, then use <code>getComputedStyle(el)</code> for concrete values, or read the injected stylesheet\u2019s <code>textContent</code> for class rules.</p> </li> <li> <p>Q: My responsive styles don\u2019t apply.</p> </li> <li> <p>A: Ensure the viewport width triggers the breakpoint (in tests, set <code>window.innerWidth</code> and dispatch a <code>resize</code>). Also verify you used breakpoint keys present in your theme.</p> </li> <li> <p>Q: Styles appear but values are wrong.</p> </li> <li>A: Check units (numbers \u2192 spacing rem; unitless must be strings). Verify color tokens exist (<code>primary.contrast</code>, <code>blue.500</code>).</li> </ul>"},{"location":"faqs/#roadmap","title":"Roadmap","text":"<ul> <li>SSR/Prerender support with style registry and cache hydration</li> <li>Unitless property allowlist (e.g., <code>lineHeight</code>, <code>zIndex</code>) to avoid needing strings</li> <li>Custom media queries and variant plugins</li> <li>Optional autoprefix step for legacy browsers</li> </ul> <p>Have more questions? Open an issue or reach out \u2014 we\u2019re happy to help.</p>"},{"location":"installation/","title":"Installation of Super JavaScript Stylesheets (SJSS)","text":"<p>This section provides a step-by-step guide on installing and integrating Super JavaScript Stylesheets (SJSS) into your Angular projects, ensuring a smooth setup process.</p>"},{"location":"installation/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Installation Steps</li> <li>Integration</li> <li>Importing the Directive</li> </ol>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding with the installation of Super JavaScript Stylesheets (SJSS), make sure your development environment is ready:</p> <ul> <li> <p>Angular Project: An existing Angular project is required. If you don't have one, you can start by creating a new Angular project following the Angular documentation.</p> </li> <li> <p>Node.js and npm: Your machine must have Node.js and npm (Node Package Manager) installed. npm, which is essential for managing JavaScript packages, comes bundled with Node.js. You can verify the installation by running <code>node -v</code> and <code>npm -v</code> in your terminal.</p> </li> <li> <p>Super JSS Library: Familiarize yourself with the Super JSS library on npm. For detailed information, visit the Super JSS npm package page.</p> </li> </ul> <p>This update provides a clearer path for users to understand and prepare their environment for SJSS, including direct access to relevant resources.</p>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":"<p>To install the Super JSS library, use the following npm command:</p> <pre><code>npm i super-jss\n</code></pre> <p>This command installs the latest version of Super JSS from npm.</p>"},{"location":"installation/#integration","title":"Integration","text":""},{"location":"installation/#importing-the-directive","title":"Importing the Directive","text":"<p>To integrate Super JSS into your Angular components, follow these steps:</p> <ol> <li>Import the SJSS Directive:</li> </ol> <p>First, import the <code>SjDirective</code> from the Super JSS package.</p> <pre><code>```typescript\nimport { SjDirective } from \"super-jss\";\n```\n</code></pre> <ol> <li>Applying the Directive:</li> </ol> <p>In your Angular component, apply the SJSS directive as shown below. This example sets the background color and padding for a div element.</p> <pre><code>```typescript\n@Component({\n  standalone: true,\n  selector: 'app-demo',\n  template: `\n    &lt;div [sj]=\"{backgroundColor: '#aa5645', padding: '10px'}\"&gt;\n      Welcome to Super JSS!\n    &lt;/div&gt;    \n  `\n})\nexport class DemoComponent {}\n```\n</code></pre> <p>For a live demonstration of Super JSS in action, visit our StackBlitz example.</p> <p>\u2b05\ufe0f Previous: Welcome to Super JSS | Next: Basic Usage \u27a1\ufe0f</p>"},{"location":"palette/","title":"Palette in SJSS","text":""},{"location":"palette/#introduction-to-palette-theming","title":"Introduction to Palette Theming","text":"<p>SJSS uses a theming approach that allows you to define semantic color sets, like primary, secondary, and tertiary, using the provided color palette. This approach ensures consistency in the application's color scheme and enhances the ease of applying styles.</p>"},{"location":"palette/#example-demonstrating-palette-with-shorthand-styles","title":"Example: Demonstrating Palette with Shorthand Styles","text":"<p>It's palette's flexibility allows for easy styling of components with various color themes. Here's an enhanced example showing the use of the palette along with shorthand styles for padding, margin, and more:</p> <pre><code>  import { Component } from \"@angular/core\";\n  import { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-themed-component',\n    template: `\n      &lt;div [sj]=\"{ bg: 'primary.main', color: 'primary.contrast', p: 2, m: 1}\"&gt;\n        Primary Themed Content\n        &lt;div [sj]=\"{ bg: 'secondary.light', color: 'secondary.contrast', p: 1, m: 0.5 }\"&gt;\n          Secondary Light Theme\n        &lt;/div&gt;\n        &lt;div [sj]=\"{ bg: 'success.main', color: 'success.contrast', p: 1, m: 0.5 }\"&gt;\n          Success Theme\n        &lt;/div&gt;\n      &lt;/div&gt;\n    `\n  })\n  export class ThemedComponent {}\n\n</code></pre> <p>In this example: - The outer div is styled with the primary color theme, along with padding (p) and margin (m) for spacing. - The inner divs use the secondary and success color themes, each with their own padding and margin for clear visual separation.</p>"},{"location":"palette/#customizing-the-palette","title":"Customizing the Palette","text":""},{"location":"palette/#structure-and-default-sets","title":"Structure and Default Sets","text":"<p>The default SJSS palette includes semantic color sets like primary, secondary, and success. Each set is structured with main, light, dark, and contrast shades for flexibility.</p>"},{"location":"palette/#updating-the-palette","title":"Updating the Palette","text":"<p>To customize the color sets according to your branding or design preferences:</p> <ol> <li> <p>Accessing the Palette: Utilize the SjThemeService to work with the current palette.</p> </li> <li> <p>Modifying Colors: Use setColors in SjThemeService to update the color sets:</p> </li> </ol> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective, SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-themed-component',\n  template: `\n    &lt;div (click)=\"updateColor()\" [sj]=\"{ bg: 'primary.main', color: 'primary.contrast', p: 2, m: 1}\"&gt;\n      Primary Themed Content\n    &lt;/div&gt;\n  `\n})\nexport class ThemedComponent {\n  constructor(private sjTheme: SjThemeService) {}\n  updateColor(): void {\n    this.sjTheme.setColors({\n      primary: {\n        main: '#ffdb58',\n        light: '#ffecb3',\n        dark: '#ffca28',\n        contrast: '#000000'\n      },\n      // colors from the library may be used as well      \n      tertiary: {\n        main: this.sjTheme.colors.purple,\n        light: this.sjTheme.colors.purple[300],\n        dark: this.sjTheme.colors.purple[700],\n        contrast: this.sjTheme.colors.purple.contrast\n      }\n    });\n  }\n}\n</code></pre> <p>This example showcases how SJSS's theming and shorthand styles enable developers to create visually appealing and consistent designs with ease.</p>"},{"location":"palette/#default-palette-configuration","title":"Default Palette Configuration","text":"<p>The default palette configuration is as follows:</p> theme.palette. main light dark contrast primary blue[500] blue[300] blue[700] yellow[500] secondary orange[500] orange[300] orange[700] blue[300] tertiary red[500] red[300] red[700] white success green[500] green[300] green[700] gray[50] info cyan[500] cyan[300] cyan[700] gray[50] warning orange[500] orange[300] orange[700] gray[50] error red[500] red[300] red[700] gray[50] dark gray[800] gray[600] black gray[50] neutral gray[500] gray[300] gray[700] gray[50] light gray[200] gray[50] gray[400] gray[900]"},{"location":"responsive-style/","title":"Responsive Styling with Breakpoints","text":"<p>Super JavaScript Stylesheets (SJSS) offers a powerful and intuitive approach to implementing responsive designs in Angular applications. Through a system of breakpoints, developers can create styles that adapt seamlessly to various screen sizes.</p>"},{"location":"responsive-style/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Breakpoint Upscaling in SJSS</li> <li>Responsive Styling Example</li> <li>Updating Breakpoints</li> <li>Further Learning Resources</li> </ol>"},{"location":"responsive-style/#breakpoint-upscaling-in-sjss","title":"Breakpoint Upscaling in SJSS","text":"<p>SJSS employs an 'upscaling' approach for breakpoints. Styles defined for a smaller breakpoint apply to larger breakpoints unless overridden.</p>"},{"location":"responsive-style/#responsive-styling-example","title":"Responsive Styling Example","text":"<p>Here's how to apply responsive styling in an Angular component using SJSS:</p> <pre><code>  import { Component } from \"@angular/core\";\n  import { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-responsive-demo',\n    template: `\n      &lt;div [sj]=\"{\n        p: {\n          xs: '5px',    // Padding for extra small screens\n          md: '10px',   // Padding for medium screens\n          lg: '15px'    // Padding for large screens\n          xl: '20px',   // Padding for extra large screens\n          xxl: '25px'  // Padding for extra extra large screens        \n        },\n        bg: {\n          xs: '#6699ff', // Background color for extra small screens\n          md: '#99ff66', // Background color for medium screens\n          lg: '#ff6699'  // Background color for large screens\n        }\n      }\"&gt;\n        Responsive SJSS Component!\n      &lt;/div&gt;\n    `\n  })\n  export class ResponsiveDemoComponent {}\n</code></pre> <p>For interactive examples and more, visit SJSS on StackBlitz.</p>"},{"location":"responsive-style/#updating-breakpoints","title":"Updating Breakpoints","text":"<p>To customize breakpoints, use the <code>SjThemeService</code> in SJSS, which is particularly powerful and user-friendly due to its use of Angular signals. This approach minimizes boilerplate and simplifies state management.</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective, SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-responsive-demo',\n  template: `\n    &lt;button (click)=\"updateBreakpoints()\" [sj]=\"{ p: 1, bg: 'primary.main', color: 'primary.contrast', borderRadius: '4px', cursor: 'pointer' }\"&gt;\n      Update Breakpoints\n    &lt;/button&gt;\n  `\n})\nexport class ResponsiveDemoComponent {\n  constructor(private sjTheme: SjThemeService) {}\n  updateBreakpoints(): void {\n    this.sjTheme.setTheme({\n      breakpoints: {\n        sm: 660, // optional: a new breakpoint assigned to sm\n        md: 980, // optional: a new breakpoint assigned to md\n        // add lg, xl, or xxl if needed.\n      }\n    });\n  }\n}\n</code></pre> <p>This example demonstrates how to update breakpoints in SJSS. For more examples, visit SJSS on StackBlitz.</p>"},{"location":"responsive-style/#further-learning-resources","title":"Further Learning Resources","text":"<p>For additional information and examples on responsive styling with SJSS, explore the following resources: - SJSS on npm: Detailed package information and installation guide. - Interactive Examples on StackBlitz: Explore hands-on examples and see SJSS in action.</p> <p>\u2b05\ufe0f Previous: Styling Shortcuts | Next: Colors \u27a1\ufe0f</p>"},{"location":"sj-api/","title":"<code>sj</code> API","text":"<p><code>sj</code> is the single, typed entrypoint for Super JSS in templates and code. It organizes style functions, layout helpers, tokens, and blueprints in clear namespaces so IDE autocomplete is predictable and onboarding is smooth.</p>"},{"location":"sj-api/#quick-examples","title":"Quick examples","text":"<pre><code>&lt;!-- Neutral CSS names --&gt;\n&lt;div [sj]=\"[\n  sj.css.display('grid'),\n  sj.css.gridTemplateColumns({ xs: '1fr', sm: '25% 75%' })\n]\"&gt;&lt;/div&gt;\n\n&lt;!-- Popular shorthands --&gt;\n&lt;div [sj]=\"[\n  sj.sh.p({ xs: 1, md: 2 }),\n  sj.sh.bg(sj.palette.primary.light)\n]\"&gt;&lt;/div&gt;\n\n&lt;!-- Ergonomic layout families --&gt;\n&lt;div [sj]=\"[\n  sj.flex.row(),\n  sj.flex.align('center'),\n  sj.flex.gap(1)\n]\"&gt;&lt;/div&gt;\n\n&lt;div [sj]=\"[\n  sj.grid.container(),\n  sj.grid.columns({ xs: '1fr', sm: '25% 75%' })\n]\"&gt;&lt;/div&gt;\n\n&lt;div [sj]=\"sj.stack({ direction: { xs: 'column', md: 'row' }, gap: 1 })\"&gt;&lt;/div&gt;\n\n&lt;!-- Blueprints and variants --&gt;\n&lt;div [sj]=\"sj.blueprints.sjCard.flat({ p: 1 })\"&gt;&lt;/div&gt;\n&lt;sj-card [variant]=\"sj.variants.sjCard.elevated\"&gt;Card&lt;/sj-card&gt;\n\n&lt;!-- Tokens --&gt;\n&lt;div [sj]=\"[\n  sj.css.color(sj.palette.primary.contrast),\n  sj.css.backgroundColor(sj.tokens.colors.blue[500]),\n  sj.css.display(sj.tokens.display.grid)\n]\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"sj-api/#namespaces","title":"Namespaces","text":"<ul> <li><code>sj.css</code> \u2014 All CSS properties as functions (from <code>csstype</code>).</li> <li>Examples: <code>sj.css.padding(...)</code>, <code>sj.css.backgroundColor(...)</code>,     <code>sj.css.flexDirection(...)</code>, <code>sj.css.gridTemplateColumns(...)</code>.</li> <li> <p>Use when you want neutral, standard CSS names.</p> </li> <li> <p><code>sj.sh</code> \u2014 Curated, popular shorthands.</p> </li> <li>Spacing: <code>p, px, py, pt, pr, pb, pl, m, mx, my, mt, mr, mb, ml, gap</code></li> <li>Color: <code>bg, c</code></li> <li>Size: <code>w, h, minW, minH, maxW, maxH</code></li> <li>Borders: <code>brad</code></li> <li> <p>Layout: <code>d, fxDir, fxJustify, fxAItems</code> (use <code>sj.flex.*</code> for more clarity)</p> </li> <li> <p><code>sj.flex</code> \u2014 Ergonomic flex helpers.</p> </li> <li>Presets: <code>row(), column(), center(), middle(), between(), around(), evenly(), wrap(), nowrap(), grow(), shrink()</code></li> <li>Knobs: <code>direction(value)</code>, <code>align(value)</code>, <code>justify(value)</code>, <code>gap(value)</code></li> <li> <p>Tokens: <code>sj.tokens.flex.direction.row</code>, <code>...justify.between</code>, <code>...align.center</code>, <code>...wrap.wrap</code></p> </li> <li> <p><code>sj.grid</code> \u2014 Grid helpers.</p> </li> <li>Container: <code>container(overrides)</code></li> <li>Templates: <code>columns(value)</code>, <code>rows(value)</code>, <code>areas(value)</code>, <code>cols(count)</code></li> <li> <p>Flow/placement: <code>autoFlow(value)</code>, <code>placeItems(value)</code>, <code>placeContent(value)</code>, <code>placeSelf(value)</code>, <code>gap(value)</code></p> </li> <li> <p><code>sj.stack(options)</code> \u2014 Quick, readable stacks.</p> </li> <li>Options: <code>direction</code> (<code>'row' | 'column'</code> or responsive), <code>gap</code>, <code>align</code>, <code>justify</code></li> <li> <p>Default: column with <code>gap: 0.5</code></p> </li> <li> <p><code>sj.blueprints</code> \u2014 Design primitives (builders) with dot-variants.</p> </li> <li><code>sjBox</code>, <code>sjCard</code>, <code>sjButton</code></li> <li> <p>Use as producers (call or pass the function):</p> <ul> <li><code>[sj]=\"sj.blueprints.sjCard.flat({ p: 1 })\"</code></li> <li><code>[sj]=\"sj.blueprints.sjCard.primary\"</code> (producer pattern)</li> </ul> </li> <li> <p><code>sj.variants</code> \u2014 Literal registries for IDE autocomplete.</p> </li> <li><code>sj.variants.sjCard.[default|outlined|flat|elevated|interactive|primary|secondary|info|codeSnippet]</code></li> <li> <p><code>sj.variants.sjButton.[default|light|contained|outlined|containedPrimary|containedLight|containedDark|containedSecondary|danger]</code></p> </li> <li> <p><code>sj.palette</code> and <code>sj.tokens</code> \u2014 Typed design tokens.</p> </li> <li><code>sj.palette.&lt;name&gt;.&lt;shade&gt;</code> \u2014 palette tokens with contrast.</li> <li><code>sj.tokens.colors.&lt;scale&gt;[shade]</code> \u2014 color scales with 50..900 and <code>contrast</code>.</li> <li><code>sj.tokens.display.[flex|grid|block|inline|inlineBlock|contents|none]</code></li> <li><code>sj.tokens.breakpoints.[xs|sm|md|lg|xl|xxl]</code></li> <li><code>sj.tokens.typography.[default|H1..H6|P|SPAN|SMALL|\u2026]</code></li> <li><code>sj.tokens.spacing(factor)</code> \u2014 returns the spacing factor (theme maps factors to CSS lengths).</li> <li><code>sj.tokens.flex.direction/justify/align/wrap</code> \u2014 typed flex literal values.</li> </ul>"},{"location":"sj-api/#helpers-root","title":"Helpers (root)","text":"<ul> <li><code>sj.compose(...parts)</code> \u2014 Merge style parts left\u2192right.</li> <li><code>sj.hover(style)</code> / <code>sj.focus(style)</code> / <code>sj.active(style)</code> / <code>sj.disabled(style)</code> \u2014 Pseudo helpers.</li> </ul>"},{"location":"sj-api/#responsive-values","title":"Responsive values","text":"<p>Any property or helper that accepts a value can take a responsive object:</p> <pre><code>{ xs: value, sm: value, md: value, lg: value, xl: value, xxl: value }\n</code></pre> <p>Example:</p> <pre><code>&lt;div [sj]=\"sj.css.flexDirection({ xs: 'column', sm: 'row' })\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"sj-api/#producer-pattern","title":"Producer pattern","text":"<p>Blueprints (and some helpers) can be passed as functions (producers). The <code>[sj]</code> directive will call them for you, so both forms work:</p> <pre><code>&lt;div [sj]=\"sj.blueprints.sjCard.primary\"&gt;&lt;/div&gt;\n&lt;div [sj]=\"sj.blueprints.sjCard.primary()\"&gt;&lt;/div&gt;\n</code></pre>"},{"location":"sj-api/#tips","title":"Tips","text":"<ul> <li>Prefer <code>sj.css.*</code> for clarity with team members familiar with CSS.</li> <li>Reach for <code>sj.flex</code>/<code>sj.grid</code>/<code>sj.stack</code> to improve readability on layout code.</li> <li>Use <code>sj.tokens</code> and <code>sj.palette</code> to avoid guessing string literals and unlock   autocomplete in templates.</li> <li>Arrays merge left\u2192right, so keep overrides last.</li> </ul>"},{"location":"spacing/","title":"Spacing System","text":""},{"location":"spacing/#introduction-to-spacing","title":"Introduction to Spacing","text":"<p>In SJSS, spacing is a versatile feature that allows for consistent and scalable space management throughout your application. Spacing can be applied to various properties like padding, margin, gap, and others, using a simple numeric factor system.</p>"},{"location":"spacing/#default-spacing-configuration","title":"Default Spacing Configuration","text":"<p>The default spacing in SJSS is defined as a function that converts a numeric factor into rem units. This approach ensures uniformity and ease of adjustments across different UI components.</p>"},{"location":"spacing/#using-spacing","title":"Using Spacing","text":"<p>To apply spacing in SJSS, you can use shorthand properties with numeric factors. For example, <code>{ p: 1 }</code> translates to padding of 1 rem.</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-spacing-demo',\n  template: `&lt;div [sj]=\"{ p: 1, m: 2 }\"&gt;Content with padding and margin&lt;/div&gt;`\n})\nexport class SpacingDemoComponent {}\n</code></pre> <p>In this example, <code>p: 1</code> applies 1 rem of padding, and <code>m: 2</code> applies 2 rem of margin to the element.</p>"},{"location":"spacing/#customizing-spacing","title":"Customizing Spacing","text":"<p>You can customize the spacing scale to fit the design needs of your application.</p>"},{"location":"spacing/#updating-spacing","title":"Updating Spacing","text":"<p>The spacing can be updated using the <code>setTheme</code> method of <code>SjThemeService</code>. This method allows you to redefine how the numeric factors are translated into actual spacing values.</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective, SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-spacing-update-demo',\n  template: `\n    &lt;button (click)=\"updateSpacing()\" [sj]=\"{ p: 1, bg: 'primary.main', color: 'primary.contrast', borderRadius: '4px', cursor: 'pointer' }\"&gt;\n      Update Spacing\n    &lt;/button&gt;\n  `\n})\nexport class SpacingUpdateDemoComponent {\n  constructor(private sjTheme: SjThemeService) {}\n  updateSpacing(): void {\n    this.sjTheme.setTheme({\n      spacing: (factor: number) =&gt; `${10 * factor}px` // Example: 1 unit now equals 10px\n    });\n  }\n}\n</code></pre>"},{"location":"spacing/#best-practices","title":"Best Practices","text":"<ul> <li>Use consistent spacing units across your application to maintain a harmonious layout.</li> <li>Choose spacing values that align with your design system or UI guidelines.</li> <li>Consider using multiples of a base unit (like 0.25 rem, 0.5 rem, etc.) for a harmonious and scalable spacing system.</li> </ul> <p>By utilizing SJSS's spacing system, developers can ensure consistent and easy-to-manage spacing throughout their Angular applications, with the flexibility to adjust it as per their design requirements.</p>"},{"location":"styling-shortcuts/","title":"Styling Shorthands and Advanced Properties","text":"<p>Super JavaScript Stylesheets (SJSS) simplifies styling in Angular applications with a range of shorthand properties, covering everything from padding and margin to flexbox layouts.</p>"},{"location":"styling-shortcuts/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Example Usage in a Component</li> <li>Shorthand Properties</li> <li>Padding and Margin</li> <li>Sizes</li> <li>Borders</li> <li>Colors</li> <li>Flexbox</li> </ol>"},{"location":"styling-shortcuts/#example-usage-in-a-component","title":"Example Usage in a Component","text":"<p>Consider styling a <code>div</code> within an Angular component using SJSS shorthand properties:</p> <pre><code>  import { Component } from \"@angular/core\";\n  import { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-shorthand-demo',\n    template: `\n        &lt;div [sj]=\"{\n          py: 1,\n          px: 2,\n          m: 2,\n          b: '1px solid black',\n          d: 'flex',\n          fxJustify: 'center',\n          fxAItems: 'center',\n          bg: '#aa5645'\n        }\"&gt;\n          Welcome to Super JSS!\n        &lt;/div&gt;\n      `\n})\nexport class ShorthandDemoComponent {}\n</code></pre> <p>For interactive examples and more detailed usage, visit SJSS on StackBlitz.</p> <p>Now, let's delve into the details of these shorthand properties.</p> <ul> <li>note: they are just shorthands, you can use the full css property in camelCase if you prefer. The <code>px</code>, <code>py</code>, <code>mx</code>, <code>my</code>, <code>bx</code>, and <code>by</code> shorthands are processed directly by the <code>SjDirective</code> for convenience.</li> </ul>"},{"location":"styling-shortcuts/#shorthand-properties","title":"Shorthand Properties","text":""},{"location":"styling-shortcuts/#padding-and-margin","title":"Padding and Margin","text":"Shorthand CSS Property Description <code>p</code> <code>padding</code> Padding on all sides <code>pt</code> <code>paddingTop</code> Padding top <code>pr</code> <code>paddingRight</code> Padding right <code>pb</code> <code>paddingBottom</code> Padding bottom <code>pl</code> <code>paddingLeft</code> Padding left <code>m</code> <code>margin</code> Margin on all sides <code>mt</code> <code>marginTop</code> Margin top <code>mr</code> <code>marginRight</code> Margin right <code>mb</code> <code>marginBottom</code> Margin bottom <code>ml</code> <code>marginLeft</code> Margin left <code>px</code> <code>paddingLeft</code>, <code>paddingRight</code> Horizontal padding <code>py</code> <code>paddingTop</code>, <code>paddingBottom</code> Vertical padding <code>mx</code> <code>marginLeft</code>, <code>marginRight</code> Horizontal margin <code>my</code> <code>marginTop</code>, <code>marginBottom</code> Vertical margin"},{"location":"styling-shortcuts/#sizes","title":"Sizes","text":"Shorthand CSS Property Description <code>w</code> <code>width</code> Width <code>h</code> <code>height</code> Height <code>minW</code> <code>minWidth</code> Minimum width <code>minH</code> <code>minHeight</code> Minimum height <code>maxW</code> <code>maxWidth</code> Maximum width <code>maxH</code> <code>maxHeight</code> Maximum height"},{"location":"styling-shortcuts/#borders","title":"Borders","text":"Shorthand CSS Property Description <code>b</code> <code>border</code> Border on all sides <code>bt</code> <code>borderTop</code> Border top <code>br</code> <code>borderRight</code> Border right <code>bb</code> <code>borderBottom</code> Border bottom <code>bl</code> <code>borderLeft</code> Border left <code>bs</code> <code>borderStyle</code> Border style <code>bw</code> <code>borderWidth</code> Border width <code>bc</code> <code>borderColor</code> Border color <code>brad</code> <code>borderRadius</code> Border radius <code>bx</code> <code>borderLeft</code>, <code>borderRight</code> Horizontal borders <code>by</code> <code>borderTop</code>, <code>borderBottom</code> Vertical borders"},{"location":"styling-shortcuts/#colors","title":"Colors","text":"Shorthand CSS Property Description <code>bg</code> <code>backgroundColor</code> Background color <code>c</code> <code>color</code> Text color"},{"location":"styling-shortcuts/#flexbox","title":"Flexbox","text":"Shorthand CSS Property Description <code>d</code> <code>display</code> Display property <code>fxDir</code> <code>flexDirection</code> Flex direction <code>fxWrap</code> <code>flexWrap</code> Flex wrap <code>fxFlow</code> <code>flexFlow</code> Flex flow <code>fxJustify</code> <code>justifyContent</code> Justify content <code>fxAItems</code> <code>alignItems</code> Align items <code>fxAContent</code> <code>alignContent</code> Align content <code>fxOrder</code> <code>order</code> Flex item order <code>fxGrow</code> <code>flexGrow</code> Flex grow <code>fxShrink</code> <code>flexShrink</code> Flex shrink <code>fxBasis</code> <code>flexBasis</code> Flex basis <code>fxASelf</code> <code>alignSelf</code> Align self <p>\u2b05\ufe0f Previous: Basic Usage | Next: Responsive Styling \u27a1\ufe0f</p>"},{"location":"theming/","title":"Comprehensive Theming System","text":"<p>Super JSS provides a robust theming system that allows you to define and switch themes dynamically in your Angular applications. Theming is essential for creating consistent styling across your application and for enabling features like dark mode.</p>"},{"location":"theming/#defining-a-theme","title":"Defining a Theme","text":"<p>YouYou can define a theme as a set of style properties that can be applied globally across your application. Themes in SJSS conform to the <code>SjTheme</code> interface.</p> <pre><code>// src/app/my-custom-theme.ts\nimport { SjTheme, defaultTheme, deepMerge } from 'super-jss';\n\nexport const myCustomTheme: Partial&lt;SjTheme&gt; = deepMerge(defaultTheme, {\n  palette: {\n    primary: {\n      main: '#6200EE', // A custom primary color (Deep Purple)\n      light: '#9E47FF',\n      dark: '#0000AA',\n      contrast: '#FFFFFF',\n    },\n    secondary: {\n      main: '#03DAC6', // A custom secondary color (Teal)\n      light: '#66FFF9',\n      dark: '#00A896',\n      contrast: '#000000',\n    },\n  },\n  // You can override other theme properties like breakpoints, typography, spacing, etc.\n});\n</code></pre> <p>(Note: <code>deepMerge</code> is an internal utility of the <code>super-jss</code> library. For external use, you might need to implement your own deep merge function or manually construct the theme object.)</p>"},{"location":"theming/#applying-a-theme","title":"Applying a Theme","text":"<p>SJSS offers two primary ways to apply a theme:</p>"},{"location":"theming/#1-initial-theme-provision-at-application-startup","title":"1. Initial Theme Provision (at application startup)","text":"<p>To set a theme for your entire application at startup, provide it using the <code>SJ_THEME</code> injection token. This is typically done in your <code>main.ts</code> file for standalone applications or in your root <code>AppModule</code> for NgModule-based applications.</p> <pre><code>// src/main.ts (for standalone applications)\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { SJ_THEME } from 'super-jss'; // Import the injection token\nimport { myCustomTheme } from './app/my-custom-theme'; // Your custom theme\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    { provide: SJ_THEME, useValue: myCustomTheme }\n  ]\n}).catch(err =&gt; console.error(err));\n</code></pre>"},{"location":"theming/#2-dynamic-theme-updates-at-runtime","title":"2. Dynamic Theme Updates (at runtime)","text":"<p>To change the theme dynamically based on user interaction, application state, or other logic, use the <code>SjThemeService</code>.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective, SjThemeService, defaultTheme } from 'super-jss';\nimport { myCustomTheme } from './my-custom-theme'; // Your custom theme\n\n@Component({\n  standalone: true,\n  selector: 'app-theme-switcher',\n  template: `\n    &lt;button (click)=\"toggleTheme()\" [sj]=\"{ p: 1, bg: 'primary.main', color: 'primary.contrast', borderRadius: '4px', cursor: 'pointer' }\"&gt;\n      Toggle Theme\n    &lt;/button&gt;\n  `,\n})\nexport class ThemeSwitcherComponent {\n  isCustomThemeActive = false;\n\n  constructor(private sjThemeService: SjThemeService) {}\n\n  toggleTheme(): void {\n    this.isCustomThemeActive = !this.isCustomThemeActive;\n    const themeToApply = this.isCustomThemeActive ? myCustomTheme : defaultTheme;\n    this.sjThemeService.setTheme(themeToApply);\n  }\n}\n</code></pre>"},{"location":"theming/#theme-aware-pseudo-selectors","title":"Theme-aware Pseudo-selectors","text":"<p>SJSS allows you to define styles for pseudo-selectors (like <code>:hover</code>, <code>:active</code>, <code>:focus</code>) directly within your <code>[sj]</code> attribute. These pseudo-selector styles can also leverage your defined theme colors and properties.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective } from 'super-jss';\n\n@Component({\n  standalone: true,\n  selector: 'app-themed-button',\n  template: `\n    &lt;button [sj]=\"{\n      p: 1,\n      bg: 'primary.main',\n      color: 'primary.contrast',\n      borderRadius: '4px',\n      cursor: 'pointer',\n      transition: 'all 0.3s ease-in-out',\n      '&amp;:hover': {\n        bg: 'primary.dark', // Uses theme's dark shade of primary\n        boxShadow: '0 4px 8px rgba(0,0,0,0.2)'\n      },\n      '&amp;:active': {\n        transform: 'scale(0.98)'\n      }\n    }\"&gt;\n      Themed Button\n    &lt;/button&gt;\n  `,\n})\nexport class ThemedButtonComponent {}\n</code></pre>"},{"location":"theming/#conclusion","title":"Conclusion","text":"<p>By following these steps, you can effectively define, apply, and dynamically switch themes in your Super JSS application, ensuring a consistent and customizable user experience.</p>"},{"location":"theming/#interactive-theming-demo","title":"Interactive Theming Demo","text":"<p>\u2b05\ufe0f Previous: Typography | Next: Examples \u27a1\ufe0f</p>"},{"location":"typography/","title":"Typography System","text":"<p>SJSS offers a robust typography system that allows for the customization of text styles across various HTML elements.</p>"},{"location":"typography/#using-typography-in-components","title":"Using Typography in Components","text":"<p>To apply these typography styles in SJSS, you can use the <code>[sj]</code> directive in your Angular components. For example:</p> <pre><code>&lt;p [sj]&gt;This paragraph will use SJSS default styling.&lt;/p&gt;\n&lt;p [sj]=\"{ c: 'primary.main' }\"&gt;This paragraph will have the primary color.&lt;/p&gt;\n\n</code></pre> <p>In these examples, the first paragraph will be rendered with the default SJSS styling for <code>&lt;p&gt;</code> elements. The second paragraph will additionally have a text color corresponding to the primary color from the palette.</p>"},{"location":"typography/#typography-default-styles","title":"Typography Default Styles","text":"<p>SJSS provides default styles for various HTML elements. These styles are defined in the <code>SjThemeService</code> and can be customized as per your application's needs. The following table lists the default typography styles in SJSS:</p> Element Font-Size (xs/md) Font-Weight Line-Height Default 1rem Normal 1.6 H1 2.5rem / 3.5rem 600 4 H2 2rem / 3rem 600 3.5 H3 1.75rem / 2.5rem 600 3 H4 1.5rem / 2rem 600 2 H5 1.25rem / 1.75rem 600 2 H6 1rem / 1.25rem 600 1.5 P 1rem Normal 1.4 SPAN 0.9rem Normal 1.2 STRONG 1rem Bold 1.2 BODY 1rem Normal 1.2 CAPTION 0.8rem Normal 1.2 <p>This table provides a comprehensive guide to the default typography settings in SJSS. Users can rely on this data to understand how text will be styled by default and make informed decisions about customizing these styles.</p>"},{"location":"typography/#customizing-typography","title":"Customizing Typography","text":"<p>SJSS allows for easy customization of typography styles. You can use the <code>SjThemeService</code> to update the default typography settings.</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective, SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-typography-update-demo',\n  template: `\n    &lt;button (click)=\"updateFont()\" [sj]=\"{ p: 1, bg: 'primary.main', color: 'primary.contrast', borderRadius: '4px', cursor: 'pointer' }\"&gt;\n      Update H3 Font\n    &lt;/button&gt;\n  `\n})\nexport class TypographyUpdateDemoComponent {\n  constructor(private sjTheme: SjThemeService) {}\n  updateFont(): void {\n    this.sjTheme.setTheme({\n      typography: {\n        H3: {\n          fontSize: '2rem',\n          fontWeight: '600',\n          lineHeight: 3\n        }\n      }\n    });\n  }\n}\n</code></pre> <p>\u2b05\ufe0f Previous: Responsive Styles | Next: Theming \u27a1\ufe0f</p>"},{"location":"blueprints/box/","title":"Box Blueprint","text":"<p>Box blueprints in Super JSS offer a composable flexbox foundation built for fast layout experimentation. The <code>sjBox</code> API follows the same ergonomic pattern as the card blueprint: call the function for a default flex container, or use dot-variants for common layouts.</p>"},{"location":"blueprints/box/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Usage</li> <li>Layout Variants</li> <li>Composing With <code>with</code></li> </ol>"},{"location":"blueprints/box/#basic-usage","title":"Basic Usage","text":"<p>The <code>sjBox</code> blueprint is a function that returns an <code>SjStyle</code> object. You can apply it directly to a <code>&lt;div&gt;</code> or any other element using the <code>[sj]</code> directive.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective, sjBox } from 'super-jss';\n\n@Component({\n  standalone: true,\n  selector: 'app-my-box',\n  imports: [SjDirective],\n  template: `\n    &lt;div [sj]=\"sjBox()\"&gt;\n      &lt;p&gt;This is a box.&lt;/p&gt;\n    &lt;/div&gt;\n  `\n})\nexport class MyBoxComponent {\n  protected readonly sjBox = sjBox;\n}\n</code></pre>"},{"location":"blueprints/box/#layout-variants","title":"Layout Variants","text":"<p>Each variant still accepts overrides, so responsive values remain fully supported.</p> <pre><code>&lt;div [sj]=\"sjBox.column({ gap: { xs: 0.5, md: 1 } })\"&gt;\n  &lt;span&gt;Stacked item A&lt;/span&gt;\n  &lt;span&gt;Stacked item B&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;div [sj]=\"sjBox.centered({ minH: '50vh' })\"&gt;\n  &lt;span&gt;Perfectly centered&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;div [sj]=\"sjBox.wrap({ gap: 0.75 })\"&gt;\n  &lt;ng-container *ngFor=\"let chip of chips\"&gt;\n    &lt;span [sj]=\"sjBox.grow({ bg: 'light.main', px: 0.75, py: 0.25 })\"&gt;{{ chip }}&lt;/span&gt;\n  &lt;/ng-container&gt;\n&lt;/div&gt;\n</code></pre> <p>Available helpers:</p> <ul> <li><code>sjBox.row()</code> \u2013 horizontal flow (default)</li> <li><code>sjBox.column()</code> \u2013 vertical stacking</li> <li><code>sjBox.grid()</code> \u2013 2-column grid (25% / 75%) for sidebar layouts</li> <li><code>sjBox.centered()</code> \u2013 centers items both axes</li> <li><code>sjBox.middle()</code> \u2013 column direction + centered</li> <li><code>sjBox.between()</code> / <code>.around()</code> / <code>.evenly()</code> \u2013 spacing utilities</li> <li><code>sjBox.wrap()</code> / <code>.nowrap()</code> \u2013 control wrapping behaviour</li> <li><code>sjBox.grow()</code> \u2013 fluid child that fills remaining space</li> </ul>"},{"location":"blueprints/box/#composing-with-with","title":"Composing With <code>with</code>","text":"<p>Need a reusable preset? Compose partial styles and reuse them across views.</p> <pre><code>const heroLayout = sjBox.with(\n  { fxJustify: 'center', fxAItems: 'center' },\n  { minH: '70vh', px: { xs: 1, md: 2 } },\n  { bg: 'primary.main', c: 'primary.contrast' }\n);\n\n&lt;section [sj]=\"heroLayout({ gap: { xs: 1, lg: 2 } })\"&gt;&lt;/section&gt;\n</code></pre> <p>You can still pass responsive overrides when you finally render:</p> <pre><code>&lt;section [sj]=\"heroLayout({ fxDir: { xs: 'column', md: 'row' } })\"&gt;\n  ...\n&lt;/section&gt;\n</code></pre>"},{"location":"blueprints/buttons/","title":"Button Blueprints","text":"<p>Button blueprints in Super JSS offer a collection of pre-styled, composable button styles. The <code>sjButton</code> blueprint is a function that provides several variants for common button use cases, from simple text buttons to contained buttons with shadows.</p>"},{"location":"blueprints/buttons/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Usage</li> <li>Button Variants<ul> <li>Default Button (Contained Primary)</li> <li>Light Button</li> <li>Contained Button</li> <li>Outlined Button</li> <li>Contained Light Button</li> <li>Contained Dark Button</li> <li>Contained Secondary Button</li> <li>Danger Button</li> </ul> </li> <li>Customizing Buttons</li> </ol>"},{"location":"blueprints/buttons/#basic-usage","title":"Basic Usage","text":"<p>The <code>sjButton</code> blueprint is a function that returns an <code>SjStyle</code> object. You can apply it directly to a <code>&lt;button&gt;</code> or <code>&lt;a&gt;</code> element using the <code>[sj]</code> directive.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective, sjButton } from 'super-jss';\n\n@Component({\n  standalone: true,\n  selector: 'app-my-button',\n  imports: [SjDirective],\n  template: `\n    &lt;button [sj]=\"sjButton()\"&gt;\n      Click Me\n    &lt;/button&gt;\n  `\n})\nexport class MyButtonComponent {\n  protected readonly sjButton = sjButton;\n}\n</code></pre>"},{"location":"blueprints/buttons/#button-variants","title":"Button Variants","text":"<p>The <code>sjButton</code> API provides several variants accessible via dot notation.</p>"},{"location":"blueprints/buttons/#default-button-contained-primary","title":"Default Button (Contained Primary)","text":"<p>The default button is a contained button with the theme's primary color. It includes a shadow and hover effects.</p> <ul> <li>Usage: <code>sjButton()</code> or <code>sjButton.containedPrimary()</code></li> </ul> <pre><code>&lt;button [sj]=\"sjButton()\"&gt;Primary Button&lt;/button&gt;\n</code></pre>"},{"location":"blueprints/buttons/#light-button","title":"Light Button","text":"<p>A light button with a subtle background and primary text color.</p> <ul> <li>Usage: <code>sjButton.light()</code></li> </ul> <pre><code>&lt;button [sj]=\"sjButton.light()\"&gt;Light Button&lt;/button&gt;\n</code></pre>"},{"location":"blueprints/buttons/#contained-button","title":"Contained Button","text":"<p>A contained button with a neutral background color.</p> <ul> <li>Usage: <code>sjButton.contained()</code></li> </ul> <pre><code>&lt;button [sj]=\"sjButton.contained()\"&gt;Contained Button&lt;/button&gt;\n</code></pre>"},{"location":"blueprints/buttons/#outlined-button","title":"Outlined Button","text":"<p>An outlined button with a transparent background and a border.</p> <ul> <li>Usage: <code>sjButton.outlined()</code></li> </ul> <pre><code>&lt;button [sj]=\"sjButton.outlined()\"&gt;Outlined Button&lt;/button&gt;\n</code></pre>"},{"location":"blueprints/buttons/#contained-light-button","title":"Contained Light Button","text":"<p>A contained button with a light background color.</p> <ul> <li>Usage: <code>sjButton.containedLight()</code></li> </ul> <pre><code>&lt;button [sj]=\"sjButton.containedLight()\"&gt;Light Contained&lt;/button&gt;\n</code></pre>"},{"location":"blueprints/buttons/#contained-dark-button","title":"Contained Dark Button","text":"<p>A contained button with a dark background color, suitable for dark themes.</p> <ul> <li>Usage: <code>sjButton.containedDark()</code></li> </ul> <pre><code>&lt;button [sj]=\"sjButton.containedDark()\"&gt;Dark Contained&lt;/button&gt;\n</code></pre>"},{"location":"blueprints/buttons/#contained-secondary-button","title":"Contained Secondary Button","text":"<p>A contained button using the theme's secondary color.</p> <ul> <li>Usage: <code>sjButton.containedSecondary()</code></li> </ul> <pre><code>&lt;button [sj]=\"sjButton.containedSecondary()\"&gt;Secondary Button&lt;/button&gt;\n</code></pre>"},{"location":"blueprints/buttons/#danger-button","title":"Danger Button","text":"<p>A button for actions that have destructive consequences, using the theme's error color.</p> <ul> <li>Usage: <code>sjButton.danger()</code></li> </ul> <pre><code>&lt;button [sj]=\"sjButton.danger()\"&gt;Danger Button&lt;/button&gt;\n</code></pre>"},{"location":"blueprints/buttons/#customizing-buttons","title":"Customizing Buttons","text":"<p>All <code>sjButton</code> variants are functions that accept an <code>overrides</code> object, allowing you to customize any style property.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective, sjButton } from 'super-jss';\n\n@Component({\n  standalone: true,\n  selector: 'app-custom-button',\n  imports: [SjDirective],\n  template: `\n    // Override padding and border-radius\n    &lt;button [sj]=\"sjButton({ p: 2, borderRadius: 1 })\"&gt;\n      Custom Padding &amp; Radius\n    &lt;/button&gt;\n\n    // Make an outlined button use the secondary color\n    &lt;button [sj]=\"sjButton.outlined({ borderColor: 'secondary.main', c: 'secondary.main' })\"&gt;\n      Custom Outlined\n    &lt;/button&gt;\n  `\n})\nexport class CustomButtonComponent {\n  protected readonly sjButton = sjButton;\n}\n</code></pre>"},{"location":"blueprints/cards/","title":"Card Blueprints","text":"<p>Card blueprints in Super JSS provide a set of pre-designed, composable card styles that you can use out-of-the-box to build consistent and attractive user interfaces. The <code>sjCard</code> blueprint is a powerful function that comes with several variants to cover most common use cases.</p>"},{"location":"blueprints/cards/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Usage</li> <li>Card Variants<ul> <li>Default Card</li> <li>Outlined Card</li> <li>Flat Card</li> <li>Elevated Card</li> <li>Interactive Card</li> <li>Primary Card</li> <li>Secondary Card</li> <li>Info Card</li> <li>Code Snippet Card</li> </ul> </li> <li>Customizing Cards</li> </ol>"},{"location":"blueprints/cards/#basic-usage","title":"Basic Usage","text":"<p>The <code>sjCard</code> blueprint is a function that returns an <code>SjStyle</code> object. You can apply it directly to any element using the <code>[sj]</code> directive.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective, sjCard } from 'super-jss';\n\n@Component({\n  standalone: true,\n  selector: 'app-my-card',\n  imports: [SjDirective],\n  template: `\n    &lt;div [sj]=\"sjCard()\"&gt;\n      &lt;h3&gt;Default Card&lt;/h3&gt;\n      &lt;p&gt;This is a simple card using the default style.&lt;/p&gt;\n    &lt;/div&gt;\n  `\n})\nexport class MyCardComponent {\n  protected readonly sjCard = sjCard;\n}\n</code></pre>"},{"location":"blueprints/cards/#card-variants","title":"Card Variants","text":"<p>The <code>sjCard</code> API comes with several convenient variants accessible via dot notation.</p>"},{"location":"blueprints/cards/#default-card","title":"Default Card","text":"<p>The default card comes with a light background, padding, and subtle transitions.</p> <ul> <li>Usage: <code>sjCard()</code></li> <li>Description: Default card with light background.</li> </ul> <pre><code>&lt;div [sj]=\"sjCard()\"&gt;...&lt;/div&gt;\n</code></pre>"},{"location":"blueprints/cards/#outlined-card","title":"Outlined Card","text":"<p>An outlined card has a transparent background and a visible border.</p> <ul> <li>Usage: <code>sjCard.outlined()</code></li> <li>Description: Outlined, transparent background, no shadow.</li> </ul> <pre><code>&lt;div [sj]=\"sjCard.outlined()\"&gt;...&lt;/div&gt;\n</code></pre>"},{"location":"blueprints/cards/#flat-card","title":"Flat Card","text":"<p>A flat card has no box shadow, making it appear flush with the background.</p> <ul> <li>Usage: <code>sjCard.flat()</code></li> <li>Description: No shadow.</li> </ul> <pre><code>&lt;div [sj]=\"sjCard.flat()\"&gt;...&lt;/div&gt;\n</code></pre>"},{"location":"blueprints/cards/#elevated-card","title":"Elevated Card","text":"<p>An elevated card has a more pronounced box shadow, making it appear to lift off the page.</p> <ul> <li>Usage: <code>sjCard.elevated()</code></li> <li>Description: Stronger shadow.</li> </ul> <pre><code>&lt;div [sj]=\"sjCard.elevated()\"&gt;...&lt;/div&gt;\n</code></pre>"},{"location":"blueprints/cards/#interactive-card","title":"Interactive Card","text":"<p>An interactive card includes hover effects, making it suitable for clickable elements.</p> <ul> <li>Usage: <code>sjCard.interactive()</code></li> <li>Description: Card with hover effects.</li> </ul> <pre><code>&lt;div [sj]=\"sjCard.interactive()\"&gt;...&lt;/div&gt;\n</code></pre>"},{"location":"blueprints/cards/#primary-card","title":"Primary Card","text":"<p>A card styled with the theme's primary color for the background and a contrasting text color.</p> <ul> <li>Usage: <code>sjCard.primary()</code></li> <li>Description: Primary background and contrast text.</li> </ul> <pre><code>&lt;div [sj]=\"sjCard.primary()\"&gt;...&lt;/div&gt;\n</code></pre>"},{"location":"blueprints/cards/#secondary-card","title":"Secondary Card","text":"<p>A card styled with the theme's secondary color.</p> <ul> <li>Usage: <code>sjCard.secondary()</code></li> <li>Description: Secondary background and contrast text.</li> </ul> <pre><code>&lt;div [sj]=\"sjCard.secondary()\"&gt;...&lt;/div&gt;\n</code></pre>"},{"location":"blueprints/cards/#info-card","title":"Info Card","text":"<p>A card for displaying informational messages, often with a subtle background.</p> <ul> <li>Usage: <code>sjCard.info()</code></li> <li>Description: Informational card with subtle background.</li> </ul> <pre><code>&lt;div [sj]=\"sjCard.info()\"&gt;...&lt;/div&gt;\n</code></pre>"},{"location":"blueprints/cards/#code-snippet-card","title":"Code Snippet Card","text":"<p>A specialized card style for displaying preformatted code.</p> <ul> <li>Usage: <code>sjCard.codeSnippet()</code></li> <li>Description: Preset style for code snippets inside cards.</li> </ul> <pre><code>&lt;pre [sj]=\"sjCard.codeSnippet()\"&gt;&lt;code&gt;...&lt;/code&gt;&lt;/pre&gt;\n</code></pre>"},{"location":"blueprints/cards/#customizing-cards","title":"Customizing Cards","text":"<p>All <code>sjCard</code> variants are functions that accept an <code>overrides</code> object. This allows you to easily customize any style property of the card.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective, sjCard } from 'super-jss';\n\n@Component({\n  standalone: true,\n  selector: 'app-custom-card',\n  imports: [SjDirective],\n  template: `\n    // Override background color of a default card\n    &lt;div [sj]=\"sjCard({ bg: 'secondary.main', c: 'secondary.contrast' })\"&gt;\n      Custom Background\n    &lt;/div&gt;\n\n    // Override border radius of a primary card\n    &lt;div [sj]=\"sjCard.primary({ borderRadius: 4 })\"&gt;\n      Custom Border Radius\n    &lt;/div&gt;\n\n    // Override padding of an elevated card\n    &lt;div [sj]=\"sjCard.elevated({ p: 3 })\"&gt;\n      Custom Padding\n    &lt;/div&gt;\n  `\n})\nexport class CustomCardComponent {\n  protected readonly sjCard = sjCard;\n}\n</code></pre>"},{"location":"blueprints/typography/","title":"Typography Blueprint","text":"<p>Typography blueprints in Super JSS provide consistent text styling with semantic variants. The <code>sjTypography</code> API offers functions for headings, body text, and other typography elements with responsive sizing and proper spacing.</p>"},{"location":"blueprints/typography/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Basic Usage</li> <li>Typography Variants</li> <li>Composing With Overrides</li> </ol>"},{"location":"blueprints/typography/#basic-usage","title":"Basic Usage","text":"<p>The <code>sjTypography</code> blueprint provides functions for different text styles. Each function returns an <code>SjStyle</code> object that can be applied to any element.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective, sjTypography } from 'super-jss';\n\n@Component({\n  standalone: true,\n  selector: 'app-typography-demo',\n  imports: [SjDirective],\n  template: `\n    &lt;div [sj]=\"sjTypography.h1()\"&gt;\n      &lt;h1&gt;Main Heading&lt;/h1&gt;\n    &lt;/div&gt;\n    &lt;div [sj]=\"sjTypography.body()\"&gt;\n      &lt;p&gt;Body text content&lt;/p&gt;\n    &lt;/div&gt;\n  `\n})\nexport class TypographyDemoComponent {\n  protected readonly sjTypography = sjTypography;\n}\n</code></pre>"},{"location":"blueprints/typography/#typography-variants","title":"Typography Variants","text":"Variant Description Typical Use Case <code>h1()</code> Largest heading, main page titles Page titles, hero sections <code>h2()</code> Section headings Major sections <code>h3()</code> Subsection headings Subsection headers <code>h4()</code> Smaller headings Component titles <code>h5()</code> Small headings Card titles, labels <code>h6()</code> Smallest headings Small labels <code>p()</code> Paragraph text Body paragraphs <code>body()</code> Default body text General content <code>span()</code> Inline text Inline elements <code>strong()</code> Bold/emphasized text Emphasized content <code>caption()</code> Small descriptive text Image captions, footnotes <code>small()</code> Fine print Legal text, disclaimers <code>pre()</code> Preformatted text Code blocks, monospace"},{"location":"blueprints/typography/#responsive-typography","title":"Responsive Typography","text":"<p>All typography variants include responsive font sizes that scale appropriately across breakpoints:</p> <pre><code>// h1 scales from 2.5rem (mobile) to 4rem (desktop)\nsjTypography.h1()\n\n// body text scales from 1rem (mobile) to 1.125rem (desktop)\nsjTypography.body()\n</code></pre>"},{"location":"blueprints/typography/#composing-with-overrides","title":"Composing With Overrides","text":"<p>Typography functions accept override objects to customize the base styles:</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective, sjTypography } from 'super-jss';\n\n@Component({\n  standalone: true,\n  selector: 'app-custom-typography',\n  imports: [SjDirective],\n  template: `\n    &lt;div [sj]=\"sjTypography.h2({ color: 'primary.main', textAlign: 'center' })\"&gt;\n      &lt;h2&gt;Centered Primary Heading&lt;/h2&gt;\n    &lt;/div&gt;\n    &lt;div [sj]=\"sjTypography.body({ fontSize: 1.2, lineHeight: 1.8 })\"&gt;\n      &lt;p&gt;Larger body text with custom line height&lt;/p&gt;\n    &lt;/div&gt;\n  `\n})\nexport class CustomTypographyComponent {\n  protected readonly sjTypography = sjTypography;\n}\n</code></pre>"},{"location":"blueprints/typography/#direct-function-imports","title":"Direct Function Imports","text":"<p>For convenience, you can import specific typography functions directly:</p> <pre><code>import { sjH1, sjH2, sjBody, sjCaption } from 'super-jss';\n\n@Component({\n  template: `\n    &lt;h1 [sj]=\"sjH1({ color: 'primary.main' })\"&gt;Title&lt;/h1&gt;\n    &lt;p [sj]=\"sjBody()\"&gt;Content&lt;/p&gt;\n    &lt;span [sj]=\"sjCaption()\"&gt;Caption&lt;/span&gt;\n  `\n})\nexport class MyComponent {\n  protected readonly sjH1 = sjH1;\n  protected readonly sjBody = sjBody;\n  protected readonly sjCaption = sjCaption;\n}\n</code></pre>"},{"location":"blueprints/typography/#notes","title":"Notes","text":"<ul> <li>Typography variants include responsive font sizes, weights, and spacing</li> <li>All variants accept override objects for customization</li> <li>Use the <code>&lt;sj-typography&gt;</code> component for semantic HTML with variant props</li> <li>Typography styles follow your theme's design tokens</li> </ul>"},{"location":"components/_index/","title":"Components","text":"<p>Official components that ship with Super JSS. Each entry walks through usage, API, and common patterns.</p> <ul> <li><code>&lt;sj-host&gt;</code> - Base component wrapper</li> <li><code>&lt;sj-box&gt;</code> - Flexible container component</li> <li><code>&lt;sj-card&gt;</code> - Content containers with variants</li> <li><code>&lt;sj-button&gt;</code> - Interactive button components</li> <li><code>&lt;sj-typography&gt;</code> - Text styling components</li> <li><code>&lt;sj-icon&gt;</code> - Icon components</li> </ul>"},{"location":"components/sj-box/","title":"<code>&lt;sj-box&gt;</code>","text":"<p><code>&lt;sj-box&gt;</code> is the component equivalent of the <code>sjBox</code> blueprint. It renders a flex container out of the box and exposes a handful of convenience inputs for common flexbox knobs. Because it is powered by the same Super JSS pipeline you can still pass responsive values and blueprint overrides when needed.</p>"},{"location":"components/sj-box/#quick-start","title":"Quick start","text":"<pre><code>&lt;sj-box display=\"column\" gap=\"1\"&gt;\n  &lt;h2&gt;Profile&lt;/h2&gt;\n  &lt;p&gt;Contact info and preferences&lt;/p&gt;\n&lt;/sj-box&gt;\n</code></pre> <p>By default <code>&lt;sj-box&gt;</code> renders a <code>display: flex</code> container with row direction. Pass any content into the slot and it will be laid out accordingly.</p>"},{"location":"components/sj-box/#inputs","title":"Inputs","text":"Input Type Description <code>display</code> <code>'row'</code>|<code>'column'</code>|<code>'grid'</code> Layout mode: flex row, flex column, or grid. <code>justify</code> <code>SjStyle['justifyContent']</code> Horizontal alignment (<code>center</code>, <code>space-between</code>, \u2026). <code>align</code> <code>SjStyle['alignItems']</code> Vertical alignment of children. <code>wrap</code> <code>SjStyle['flexWrap']</code> Enables wrapping (<code>wrap</code>, <code>nowrap</code>, responsive). <code>gap</code> <code>SjStyle['gap']</code> Gap between children (numeric or responsive). <code>bg</code> <code>SjStyle['bg']</code> Background color. <code>color</code> <code>SjStyle['c']</code> Text color. <p>All inputs accept responsive objects just like any other Super JSS style.</p>"},{"location":"components/sj-box/#overrides-and-composition","title":"Overrides and composition","text":"<p>If you need additional styles, pass them through <code>[sj]</code> like any other element:</p> <pre><code>&lt;sj-box display=\"column\" gap=\"0.75\" [sj]=\"{ p: { xs: '1rem', md: '2rem' } }\"&gt;\n  ...\n&lt;/sj-box&gt;\n</code></pre> <p>You can also feed arrays of styles and they will be merged from left to right.</p>"},{"location":"components/sj-box/#notes","title":"Notes","text":"<ul> <li><code>&lt;sj-box&gt;</code> is standalone; import it directly or via your shared components   module.</li> <li>Under the hood it forwards styles to the <code>SjDirective</code>, so shorthand helpers   and responsive behaviour behave exactly like the blueprint.</li> <li>Need even more control? You can still drop down to the <code>sjBox</code> blueprint and   pass the result to <code>[sj]</code> directly.</li> </ul>"},{"location":"components/sj-button/","title":"sj-button","text":"<p>sj-button renders a button styled via the button blueprint. It accepts a variant and [sj] overrides that merge after the variant.</p> <p>Usage</p> <pre><code>&lt;sj-button [variant]=\"sj.variants.sjButton.outlined\" [sj]=\"{ px: 1, py: 0.5 }\"&gt;\n  Outlined\n&lt;/sj-button&gt;\n\n&lt;sj-button [sj]=\"sj.button.containedPrimary({ px: 1 })\"&gt;\n  Primary\n&lt;/sj-button&gt;\n</code></pre> <p>Variants</p> <ul> <li>default (contained primary)</li> <li>light, contained, outlined</li> <li>containedPrimary, containedSecondary, containedLight, containedDark</li> <li>danger</li> </ul> <p>Notes</p> <ul> <li>[sj] overrides are merged after the variant so you can adjust spacing, colors, etc.</li> </ul>"},{"location":"components/sj-card/","title":"sj-card","text":"<p>sj-card is a lightweight wrapper that applies a card blueprint to its parent via sj-host and accepts variant and [sj] overrides.</p> <p>Usage</p> <pre><code>&lt;sj-card [variant]=\"'flat'\" [sj]=\"[ sj.css.gap(0.5) ]\"&gt;\n  &lt;h3 [sj]=\"{ m: 0 }\"&gt;Title&lt;/h3&gt;\n  &lt;p [sj]=\"{ m: 0 }\"&gt;Body&lt;/p&gt;\n  &lt;a [sj]=\"sj.button.outlined({ px: 1 })\"&gt;Action&lt;/a&gt;\n  &lt;!-- content --&gt;\n  &lt;!-- footer --&gt;\n  &lt;small [sj]=\"{ c: 'neutral' }\"&gt;Meta&lt;/small&gt;\n  &lt;!-- ... --&gt;\n&lt;/sj-card&gt;\n</code></pre> <p>Variants</p> <ul> <li>default (sjCard())</li> <li>outlined</li> <li>flat</li> <li>elevated</li> <li>interactive</li> <li>primary, secondary</li> <li>info, codeSnippet</li> </ul> <p>Override precedence</p> <ul> <li>The [sj] input merges after the variant, so your styles win.</li> </ul>"},{"location":"components/sj-host/","title":"<code>&lt;sj-host&gt;</code>","text":"<p><code>sj-host</code> is a small utility component that lets you apply Super JSS styles when you need a helper wrapper (dynamic component host, layout slots, etc.) without leaving extra DOM once rendered.</p>"},{"location":"components/sj-host/#when-to-use-it","title":"When to use it","text":"<ul> <li>You are creating components dynamically and need a predictable anchor to   attach <code>[sj]</code> styles.</li> <li>You want a shorthand wrapper that merges with its parent instead of adding a   real <code>&lt;div&gt;</code>.</li> <li>You need to expose a <code>ViewContainerRef</code> for projected/dynamic child content   while keeping the <code>sj</code> directive behaviour.</li> </ul>"},{"location":"components/sj-host/#usage","title":"Usage","text":"<pre><code>&lt;sj-host [sj]=\"sj.blueprints.sjBox.column({ gap: 1 })\"&gt;\n  &lt;h2&gt;Settings&lt;/h2&gt;\n  &lt;app-settings-panel&gt;&lt;/app-settings-panel&gt;\n&lt;/sj-host&gt;\n</code></pre> <ul> <li>Styles passed through <code>[sj]</code> are applied to the parent element once the   component renders. The <code>&lt;sj-host&gt;</code> tag removes itself after projection.</li> <li>Slots (<code>&lt;ng-content&gt;</code>) render normally; you can combine text, components, and   layout helpers freely.</li> </ul>"},{"location":"components/sj-host/#api","title":"API","text":"Input Type Description <code>sj</code> <code>SjStyle \\| SjStyle[]</code> Styles forwarded to the parent element."},{"location":"components/sj-host/#notes","title":"Notes","text":"<ul> <li>Because the styles move to the parent, make sure the parent is the element you   intend to style (e.g., wrap in another div if you need isolation).</li> <li><code>sj-host</code> depends on <code>SjDirective</code>, so all shorthand/responsive features are   available.</li> <li>The component exposes the underlying <code>ViewContainerRef</code> should you need it   when instantiating components programmatically.</li> </ul>"},{"location":"components/sj-icon/","title":"<code>&lt;sj-icon&gt;</code>","text":"<p><code>&lt;sj-icon&gt;</code> renders SVG icons with theme-aware styling. It provides a collection of built-in icons that automatically adapt to your theme colors.</p>"},{"location":"components/sj-icon/#quick-start","title":"Quick start","text":"<pre><code>&lt;sj-icon name=\"star\"&gt;&lt;/sj-icon&gt;\n&lt;sj-icon name=\"heart\" [sj]=\"{ color: 'primary.main' }\"&gt;&lt;/sj-icon&gt;\n&lt;sj-icon name=\"check\" size=\"2rem\" fill=\"green\"&gt;&lt;/sj-icon&gt;\n</code></pre>"},{"location":"components/sj-icon/#available-icons","title":"Available icons","text":"<p>The component includes a curated set of icons. Common ones include:</p> <ul> <li><code>star</code>, <code>heart</code>, <code>check</code>, <code>close</code>, <code>menu</code>, <code>search</code></li> <li><code>sun</code>, <code>moon</code>, <code>user</code>, <code>settings</code>, <code>bell</code></li> <li><code>arrow-left</code>, <code>arrow-right</code>, <code>arrow-up</code>, <code>arrow-down</code></li> <li><code>plus</code>, <code>minus</code>, <code>edit</code>, <code>trash</code>, <code>download</code>, <code>upload</code></li> </ul>"},{"location":"components/sj-icon/#inputs","title":"Inputs","text":"Input Type Description <code>name</code> <code>SjIconName</code> Icon identifier <code>size</code> <code>string \\| number</code> Icon size (CSS units) <code>fill</code> <code>string</code> Fill color (theme tokens or CSS colors) <code>stroke</code> <code>string</code> Stroke color <code>fillOpacity</code> <code>number</code> Fill opacity (0-1) <code>strokeOpacity</code> <code>number</code> Stroke opacity (0-1) <code>ariaHidden</code> <code>boolean</code> Hide from screen readers (default: true) <code>role</code> <code>string \\| null</code> ARIA role <code>label</code> <code>string \\| null</code> Accessible label <code>sj</code> <code>SjInput</code> Additional style overrides"},{"location":"components/sj-icon/#usage-examples","title":"Usage examples","text":""},{"location":"components/sj-icon/#basic-icons","title":"Basic icons","text":"<pre><code>&lt;sj-icon name=\"star\"&gt;&lt;/sj-icon&gt;\n&lt;sj-icon name=\"heart\"&gt;&lt;/sj-icon&gt;\n&lt;sj-icon name=\"check\"&gt;&lt;/sj-icon&gt;\n</code></pre>"},{"location":"components/sj-icon/#themed-icons","title":"Themed icons","text":"<pre><code>&lt;sj-icon name=\"sun\" [sj]=\"{ color: 'warning.main' }\"&gt;&lt;/sj-icon&gt;\n&lt;sj-icon name=\"moon\" fill=\"primary.main\"&gt;&lt;/sj-icon&gt;\n&lt;sj-icon name=\"bell\" stroke=\"secondary.main\" fillOpacity=\"0.8\"&gt;&lt;/sj-icon&gt;\n</code></pre>"},{"location":"components/sj-icon/#different-sizes","title":"Different sizes","text":"<pre><code>&lt;sj-icon name=\"star\" size=\"1rem\"&gt;&lt;/sj-icon&gt;\n&lt;sj-icon name=\"star\" size=\"2rem\"&gt;&lt;/sj-icon&gt;\n&lt;sj-icon name=\"star\" size=\"3rem\"&gt;&lt;/sj-icon&gt;\n</code></pre>"},{"location":"components/sj-icon/#accessible-icons","title":"Accessible icons","text":"<pre><code>&lt;sj-icon name=\"warning\" ariaHidden=\"false\" label=\"Warning message\" role=\"img\"&gt;&lt;/sj-icon&gt;\n</code></pre>"},{"location":"components/sj-icon/#with-custom-styling","title":"With custom styling","text":"<pre><code>&lt;sj-icon name=\"check\" size=\"1.5rem\" [sj]=\"{ color: 'success.main', cursor: 'pointer' }\" (click)=\"handleClick()\"&gt;&lt;/sj-icon&gt;\n</code></pre>"},{"location":"components/sj-icon/#notes","title":"Notes","text":"<ul> <li><code>&lt;sj-icon&gt;</code> is standalone; import it directly or via <code>SJ_BASE_COMPONENTS_IMPORTS</code></li> <li>Icons automatically adapt to theme changes</li> <li>Use theme tokens for <code>fill</code> and <code>stroke</code> to maintain consistency</li> <li>Set <code>ariaHidden=\"false\"</code> and provide <code>label</code> for interactive or decorative icons</li> <li>Icons are rendered as inline-flex elements with zero line-height</li> </ul>"},{"location":"components/sj-typography/","title":"<code>&lt;sj-typography&gt;</code>","text":"<p><code>&lt;sj-typography&gt;</code> provides consistent text styling with semantic variants. It renders text elements with predefined typography styles that follow your theme's design system.</p>"},{"location":"components/sj-typography/#quick-start","title":"Quick start","text":"<pre><code>&lt;sj-typography variant=\"h1\"&gt;Main Heading&lt;/sj-typography&gt;\n&lt;sj-typography variant=\"body\"&gt;Regular body text content&lt;/sj-typography&gt;\n&lt;sj-typography variant=\"caption\"&gt;Small caption text&lt;/sj-typography&gt;\n</code></pre>"},{"location":"components/sj-typography/#variants","title":"Variants","text":"Variant Description <code>h1</code> Largest heading, main page titles <code>h2</code> Section headings <code>h3</code> Subsection headings <code>h4</code> Smaller headings <code>h5</code> Small headings <code>h6</code> Smallest headings <code>p</code> Paragraph text <code>span</code> Inline text <code>strong</code> Bold/emphasized text <code>body</code> Default body text <code>caption</code> Small descriptive text <code>small</code> Fine print, legal text <code>pre</code> Preformatted text <code>default</code> Unstyled text (inherits from parent)"},{"location":"components/sj-typography/#inputs","title":"Inputs","text":"Input Type Description <code>variant</code> <code>SjTypographyVariant</code> Typography style variant <code>sj</code> <code>SjInput</code> Additional style overrides"},{"location":"components/sj-typography/#usage-examples","title":"Usage examples","text":""},{"location":"components/sj-typography/#headings-hierarchy","title":"Headings hierarchy","text":"<pre><code>&lt;sj-typography variant=\"h1\"&gt;Page Title&lt;/sj-typography&gt;\n&lt;sj-typography variant=\"h2\"&gt;Section Title&lt;/sj-typography&gt;\n&lt;sj-typography variant=\"h3\"&gt;Subsection Title&lt;/sj-typography&gt;\n&lt;sj-typography variant=\"h4\"&gt;Component Title&lt;/sj-typography&gt;\n</code></pre>"},{"location":"components/sj-typography/#mixed-content","title":"Mixed content","text":"<pre><code>&lt;sj-typography variant=\"body\"&gt;\n  This is regular body text with &lt;sj-typography variant=\"strong\"&gt;bold emphasis&lt;/sj-typography&gt; and\n  &lt;sj-typography variant=\"caption\"&gt;caption text&lt;/sj-typography&gt;.\n&lt;/sj-typography&gt;\n</code></pre>"},{"location":"components/sj-typography/#custom-styling","title":"Custom styling","text":"<pre><code>&lt;sj-typography variant=\"h2\" [sj]=\"{ color: 'primary.main', textAlign: 'center' }\"&gt;\n  Centered Primary Heading\n&lt;/sj-typography&gt;\n</code></pre>"},{"location":"components/sj-typography/#notes","title":"Notes","text":"<ul> <li><code>&lt;sj-typography&gt;</code> is standalone; import it directly or via <code>SJ_BASE_COMPONENTS_IMPORTS</code></li> <li>Variants follow semantic HTML conventions but with consistent theme-based styling</li> <li>Use <code>[sj]</code> input for additional customizations that override the variant styles</li> </ul>"}]}