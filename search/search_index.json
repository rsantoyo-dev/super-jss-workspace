{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Supercharge Your Angular 20 Styling with Super JavaScript Stylesheets (SJSS)","text":"<p>Welcome to Super JavaScript Stylesheets (SJSS) \u2013 the ultimate dynamic and responsive styling library meticulously crafted for Angular 20 applications. SJSS seamlessly integrates with Angular's latest advancements, transforming how you approach styling by making it intuitive, incredibly flexible, and effortlessly maintainable. Whether you're building a sleek personal project or a robust enterprise application, SJSS empowers you to achieve stunning UIs with unparalleled ease and efficiency.</p>"},{"location":"#why-sjss-unleash-the-power-of-dynamic-styling","title":"Why SJSS? Unleash the Power of Dynamic Styling","text":"<p>Tired of wrestling with complex CSS or boilerplate? SJSS simplifies styling in Angular by combining the best of JavaScript and CSS, offering a powerful, component-centric approach.</p>"},{"location":"#key-advantages","title":"Key Advantages:","text":"<ul> <li>\ud83d\udcf1 Effortless Responsiveness: Design truly adaptive layouts that look flawless on any screen size, from mobile to desktop, with minimal effort.</li> <li>\u2728 Dynamic Control: Update styles in real-time based on application state, user interactions, or theme preferences, creating truly interactive experiences.</li> <li>\ud83c\udfa8 Simplified Theming: Implement comprehensive theming capabilities with ease, allowing users to personalize their interface on the fly.</li> <li>\u26a1 Angular-Native Performance: Built from the ground up with Angular 20 signals, SJSS delivers blazing-fast performance without the typical overhead of RxJS, ensuring a smooth user experience.</li> <li>\ud83e\udde9 On-the-Fly CSS Generation: SJSS generates and injects CSS classes into the DOM only as needed, avoiding large, unused style bundles and minimizing memory footprint.</li> <li>\ud83e\udeb6 Incredibly Lightweight: At less than 8KB minified (under 3KB gzipped), SJSS adds minimal footprint to your application.</li> <li>\u270d\ufe0f Familiar &amp; Intuitive: Leverage a syntax that feels natural to anyone familiar with CSS or JavaScript, making adoption quick and easy.</li> <li>\ud83d\ude80 Standalone &amp; Flexible: As a standalone Angular directive, SJSS integrates seamlessly with any component, offering maximum flexibility.</li> <li>\ud83c\udd70\ufe0f Enhanced Typography: Gain precise control over your text elements with powerful and intuitive typography styling options.</li> </ul> <p>Unlike traditional utility-first frameworks like Tailwind CSS or component libraries like Material UI, SJSS doesn't ship with a giant prebuilt utility set or a large component library. Instead, it generates only the CSS you explicitly use, on the fly, keeping your application's bundle size minimal and ensuring optimal performance. This approach means no unused styles bloating your memory, just lean, efficient CSS tailored precisely to your needs.</p>"},{"location":"#quick-example","title":"Quick Example:","text":"<pre><code>&lt;div [sj]=\"{\n  d: 'flex',\n  fxJustify: 'center',\n  p: { xs: 1, md: 2 }, /* Responsive padding */\n  bg: 'primary.main',\n  borderRadius: '8px',\n  transition: 'all 0.3s ease-in-out',\n  '&amp;:hover': { /* Hover effect */\n    bg: 'primary.dark',\n    boxShadow: '0 4px 8px rgba(0,0,0,0.2)'\n  }\n}\"&gt;\n  &lt;span [sj]=\"{ color: 'primary.contrast', fontSize: { xs: 1, md: 1.5 } }\"&gt;\n    Hello SJSS!\n  &lt;/span&gt;\n&lt;/div&gt;\n</code></pre> <p>In this example, the container is responsive, themed, and interactive on hover \u2014 all without writing a single CSS class.</p>"},{"location":"#get-started-in-seconds","title":"Get Started in Seconds!","text":"<p>Experience the future of Angular styling. Dive into our comprehensive documentation:</p> <ul> <li>Installation Guide: Your first step to transforming your Angular styling workflow.</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<p>Join a growing community of developers pushing the boundaries of Angular styling. Connect, share, and contribute:</p> <ul> <li>\ud83c\udf1f Star us on GitHub: Super JSS on GitHub</li> <li>\ud83d\udce6 Install via npm: Super JSS on npm</li> <li>\ud83d\udee0\ufe0f Try live on StackBlitz: Super JSS on StackBlitz</li> </ul>"},{"location":"#additional-resources","title":"Additional Resources","text":"<ul> <li>Articles by Richard on Medium</li> </ul>"},{"location":"#demos","title":"\ud83c\udfa8 Demos","text":"<p>This interactive demo provides a hands-on experience with the powerful theming capabilities of SuperJSS. Here's what you can explore:</p> <ul> <li>Live Theme Switching: Use the theme selector in the header to switch between different pre-built themes (e.g., Default, Desert, Ocean) and even a custom theme. Notice how the application's entire look and feel changes instantly.</li> <li>Dynamic Color Palette: The \"Palette\" section showcases the theme's color palette, including primary, secondary, tertiary, and other semantic colors. These colors automatically update when you switch themes.</li> <li> <p>Adaptive Typography: The \"Typography\" section demonstrates how headings, paragraphs, and other text elements adapt to the new theme's typography settings.</p> <p> </p> </li> </ul>"},{"location":"#support","title":"\ud83d\udc96\u2615 Support","text":"<p>If Super JSS empowers your projects, consider supporting its continued development:</p> <ul> <li>\u2615 \u2615 \u2615 Buy me a coffee</li> </ul>"},{"location":"#contact","title":"\ud83d\udcec Contact","text":"<p>For inquiries, feedback, or issues, reach out at ricardo.santoyo@hotmail.com.</p>"},{"location":"basic-usage/","title":"Basic Usage and Core Concepts","text":"<p>Super JSS streamlines the application of dynamic styles in Angular 20 applications. This guide provides a detailed overview of importing and using the <code>SjDirective</code>, complemented by basic examples to illustrate its practical application, including its on-the-fly CSS generation and support for pseudo-selectors.</p>"},{"location":"basic-usage/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Importing <code>SjDirective</code></li> <li>Applying <code>SjDirective</code></li> <li>Composing Styles with Arrays</li> <li>Pseudo-selectors</li> <li>Responsive Styling Example</li> <li>Further Resources</li> </ol>"},{"location":"basic-usage/#importing-sjdirective","title":"Importing <code>SjDirective</code>","text":""},{"location":"basic-usage/#import-the-directive","title":"Import the Directive","text":"<p>To integrate Super JSS into your Angular component, start by importing <code>SjDirective</code>:</p> <pre><code>import { SjDirective } from \"super-jss\";\n</code></pre>"},{"location":"basic-usage/#applying-sjdirective","title":"Applying <code>SjDirective</code>","text":""},{"location":"basic-usage/#apply-the-directive","title":"Apply the Directive","text":"<p><code>SjDirective</code> can be applied to any HTML element in your Angular template. It accepts either a single object or an array of objects for style definitions. SJSS automatically generates and injects CSS classes into the DOM only as needed, keeping your application lean and fast.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-demo',\n  template: `\n    &lt;div [sj]=\"{ p: 2, bg: 'primary.main', color: 'primary.contrast' }\"&gt;\n      Welcome to Super JSS!\n    &lt;/div&gt;\n  `\n})\nexport class DemoComponent {}\n</code></pre>"},{"location":"basic-usage/#composing-styles-with-arrays","title":"Composing Styles with Arrays","text":"<p>One of the powerful features of SJSS is the ability to compose styles by providing an array of <code>SjStyle</code> objects to the <code>[sj]</code> directive. This allows you to create reusable \"JavaScript classes\" (which are essentially just <code>SjStyle</code> objects) and combine them dynamically.</p> <p>This approach promotes modularity, reusability, and makes managing complex style sets much more intuitive. Styles from later objects in the array will override properties from earlier ones if there are conflicts.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective, SjStyle } from 'super-jss';\n\n// Define reusable style objects (your \"JS classes\")\nconst myPadding: SjStyle = { p: 2 };\nconst myResponsiveMargin: SjStyle = { m: { xs: 2, md: 4 } };\nconst myBorder: SjStyle = { border: '1px solid #ccc', borderRadius: '4px' };\nconst myShadow: SjStyle = { boxShadow: '0 2px 4px rgba(0,0,0,0.1)' };\n\n@Component({\n  standalone: true,\n  selector: 'app-composed-styles-demo',\n  template: `\n    &lt;div [sj]=\"[myPadding, myResponsiveMargin, myBorder, myShadow, { bg: 'lightblue' }]\"&gt;\n      This div uses composed styles!\n    &lt;/div&gt;\n    &lt;div [sj]=\"[myPadding, myShadow, { color: 'red' }]\"&gt;\n      Another div with different composition.\n    &lt;/div&gt;\n  `,\n})\nexport class ComposedStylesDemoComponent {\n  // Make them available in the template\n  protected readonly myPadding = myPadding;\n  protected readonly myResponsiveMargin = myResponsiveMargin;\n  protected readonly myBorder = myBorder;\n  protected readonly myShadow = myShadow;\n}\n</code></pre> <p>In this example, <code>myPadding</code>, <code>myResponsiveMargin</code>, <code>myBorder</code>, and <code>myShadow</code> are reusable <code>SjStyle</code> objects. They are combined in an array passed to <code>[sj]</code>, allowing for flexible and dynamic styling composition.</p>"},{"location":"basic-usage/#pseudo-selectors","title":"Pseudo-selectors","text":"<p>SJSS supports CSS pseudo-selectors using the <code>&amp;:</code> syntax within your style objects. This allows you to define styles for states like hover, focus, or active directly within your <code>[sj]</code> attribute.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-button-demo',\n  template: `\n    &lt;button [sj]=\"{\n      p: 1,\n      bg: 'secondary.main',\n      color: 'secondary.contrast',\n      borderRadius: '4px',\n      cursor: 'pointer',\n      transition: 'all 0.2s ease-in-out',\n      '&amp;:hover': {\n        bg: 'secondary.dark',\n        boxShadow: '0 2px 4px rgba(0,0,0,0.2)'\n      },\n      '&amp;:active': {\n        transform: 'scale(0.98)'\n      }\n    }\"&gt;\n      Click Me\n    &lt;/button&gt;\n  `\n})\nexport class ButtonDemoComponent {}\n</code></pre>"},{"location":"basic-usage/#responsive-styling-example","title":"Responsive Styling Example","text":"<p>SJSS makes responsive design intuitive. You can define different style values for various breakpoints (e.g., <code>xs</code>, <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, <code>xxl</code>) directly within your style properties.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-responsive-div',\n  template: `\n    &lt;div [sj]=\"{\n      p: { xs: 1, md: 2, lg: 3 }, /* Padding changes based on screen size */\n      bg: { xs: 'red', md: 'blue', lg: 'green' }, /* Background color changes */\n      fontSize: { xs: 1, md: 1.5, lg: 2 }\n    }\"&gt;\n      This div adapts to screen size!\n    &lt;/div&gt;\n  `\n})\nexport class ResponsiveDivComponent {}\n</code></pre>"},{"location":"basic-usage/#further-resources","title":"Further Resources","text":"<p>For more information and advanced examples of using Super JSS, explore the following resources: - Super JSS on npm: Detailed package information and installation guide. - Super JSS Demos on StackBlitz: Interactive examples to understand Super JSS features better.</p> <p>\u2b05\ufe0f Previous: Installation | Next: Styling Shortcuts \u27a1\ufe0f</p>"},{"location":"colors/","title":"Color Palette and Theming","text":"<p>Super JavaScript Stylesheets (SJSS) provides a flexible and powerful system for managing color palettes in Angular applications. Utilizing the SJSS color palette, you can define and apply a consistent color scheme throughout your app.</p>"},{"location":"colors/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Using the Color Palette</li> <li>Personalizing the Color Palette</li> <li>Color Palette Default Reference</li> </ol>"},{"location":"colors/#using-the-color-palette","title":"Using the Color Palette","text":"<p>In SJSS, colors can be accessed and used within components, either through direct styling or as part of responsive and shorthand styles. Here's an example of how to use the color palette in a component:</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-colorful-component',\n    template: `\n      &lt;div [sj]=\"{ m: '2rem', p: '1rem', bg: 'blue.500' }\"&gt;\n       &lt;div [sj]=\"{ bg: 'orange.300', color: 'orange.contrast' }\"&gt;\n        This is a colorful component!\n       &lt;/div&gt;        \n      &lt;/div&gt;\n    `\n  })\n  export class ColorfulComponent {}\n\n</code></pre> <p>in this example, we're using the color palette to apply a background color to a div. We're also using the color palette to apply a background color and text color to a nested div.</p>"},{"location":"colors/#personalize-the-color-palette","title":"Personalize the Color Palette","text":"<p>The color palette can be accessed and modified through the <code>SjThemeService</code>. This service provides a powerful and user-friendly way to customize the color palette in your Angular application. Once set, these colors are automatically recognized across the application through the <code>SjDirective</code>, ensuring a seamless and consistent experience.</p> <p>Any palette item is defined as:</p> <pre><code>  {\n    50: string,\n    100: string,\n    200: string,\n    300: string,\n    400: string,\n    500: string, // Default shade\n    600: string,\n    700: string,\n    800: string,\n    900: string,\n    contrast: string\n  } \n</code></pre> <p>to update a color, please use the <code>setTheme</code> method from the <code>SjThemeService</code> as follows:</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective, SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-palette-update-demo',\n  template: `\n    &lt;button (click)=\"updateColors()\" [sj]=\"{ p: 1, bg: 'primary.main', color: 'primary.contrast', borderRadius: '4px', cursor: 'pointer' }\"&gt;\n      Update Pink Color\n    &lt;/button&gt;\n  `\n})\n\nexport class PaletteUpdateDemoComponent {\n  constructor(private sjTheme: SjThemeService) {}\n  updateColors(): void {\n    this.sjTheme.setTheme({\n      colors: {\n        pink: {\n          50: '#dc3545',\n          100: '#d8bbd0',\n          200: '#d48fb1',\n          300: '#fd06292',\n          400: '#fc407a',\n          500: '#f91e63',\n          600: '#a81b60',\n          700: '#82185b',\n          800: '#8d1457',\n          900: '#680e4f',\n          contrast: '#d59242'\n        }\n      }\n    });\n  }\n}\n\n</code></pre>"},{"location":"colors/#color-palette-default-reference","title":"Color Palette Default Reference","text":"Color 50 100 200 300 400 500 (default) 600 700 800 900 Contrast Blue #E3F2FD #BBDEFB #90CAF9 #64B5F6 #42A5F5 #3498DB #2E86C1 #1976D2 #1565C0 #0D47A1 #c26d29 Indigo #E8EAF6 #C5CAE9 #9FA8DA #7986CB #5C6BC0 #3F51B5 #3949AB #303F9F #283593 #1A237E #f59242 Purple #F3E5F5 #E1BEE7 #CE93D8 #BA68C8 #AB47BC #9C27B0 #8E24AA #7B1FA2 #6A1B9A #4A148C #f59242 Pink #FCE4EC #F8BBD0 #F48FB1 #F06292 #EC407A #E91E63 #D81B60 #C2185B #AD1457 #880E4F #f59242 Red #FFEBEE #FFCDD2 #EF9A9A #E57373 #EF5350 #E74C3C #E53935 #D32F2F #C62828 #771010 #f59242 Orange #FFF3E0 #FFE0B2 #FFCC80 #FFB74D #FFA726 #F39C12 #FB8C00 #F57C00 #EF6C00 #bb4600 #f59242 Yellow #FFFDE7 #FFF9C4 #FFF59D #FFF176 #FFEE58 #FFEB3B #FDD835 #FBC02D #F9A825 #F57F17 #f59242 Green #E8F5E9 #C8E6C9 #A5D6A7 #81C784 #66BB6A #4CAF50 #43A047 #388E3C #2E7D32 #1B5E20 #f59242 Teal #E0F2F1 #B2DFDB #80CBC4 #4DB6AC #26A69A #009688 #00897B #00796B #00695C #004D40 #f59242 Cyan #E0F7FA #B2EBF2 #80DEEA #4DD0E1 #26C6DA #00BCD4 #00ACC1 #0097A7 #00838F #006064 #f59242 Gray #FAFAFA #F5F5F5 #EEEEEE #E0E0E0 #BDBDBD #9E9E9E #757575 #616161 #424242 #212121 #f59242 Black - - - - - #000000 - - - - - <p>\u2b05\ufe0f Previous: Styling Shortcuts | Next: Spacing \u27a1\ufe0f</p>"},{"location":"examples/","title":"SuperJSS Examples","text":"<p>Explore various examples to understand the capabilities and usage of SuperJSS.</p> <ul> <li>Demo App: this Project can be seen in StackBlitz,   ## Interactive Theming Demo</li> </ul> <p>This interactive demo provides a hands-on experience with the powerful theming capabilities of SuperJSS. Here's what you can explore:</p> <ul> <li>Live Theme Switching: Use the theme selector in the header to switch between different pre-built themes (e.g., Default, Desert, Ocean) and even a custom theme. Notice how the application's entire look and feel changes instantly.</li> <li>Dynamic Color Palette: The \"Palette\" section showcases the theme's color palette, including primary, secondary, tertiary, and other semantic colors. These colors automatically update when you switch themes.</li> <li> <p>Adaptive Typography: The \"Typography\" section demonstrates how headings, paragraphs, and other text elements adapt to the new theme's typography settings.</p> <p> </p> </li> </ul>"},{"location":"examples/#basic-usage","title":"Basic Usage","text":"<p>StackBlitz: Basic Usage Example</p> <p>This example demonstrates the basic usage of SuperJSS to create responsive designs.</p>"},{"location":"examples/#flex-box-responsive-demo","title":"Flex-box Responsive Demo","text":"<p>This interactive demo showcases how to leverage SuperJSS to create responsive flex-box layouts. Explore the code to see how <code>[sj]</code> attributes are used to define flexible and adaptive UI components.</p> <p>\u2190 Theming | Home </p>"},{"location":"installation/","title":"Installation of Super JavaScript Stylesheets (SJSS)","text":"<p>This section provides a step-by-step guide on installing and integrating Super JavaScript Stylesheets (SJSS) into your Angular projects, ensuring a smooth setup process.</p>"},{"location":"installation/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Installation Steps</li> <li>Integration</li> <li>Importing the Directive</li> </ol>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before proceeding with the installation of Super JavaScript Stylesheets (SJSS), make sure your development environment is ready:</p> <ul> <li> <p>Angular Project: An existing Angular project is required. If you don't have one, you can start by creating a new Angular project following the Angular documentation.</p> </li> <li> <p>Node.js and npm: Your machine must have Node.js and npm (Node Package Manager) installed. npm, which is essential for managing JavaScript packages, comes bundled with Node.js. You can verify the installation by running <code>node -v</code> and <code>npm -v</code> in your terminal.</p> </li> <li> <p>Super JSS Library: Familiarize yourself with the Super JSS library on npm. For detailed information, visit the Super JSS npm package page.</p> </li> </ul> <p>This update provides a clearer path for users to understand and prepare their environment for SJSS, including direct access to relevant resources.</p>"},{"location":"installation/#installation-steps","title":"Installation Steps","text":"<p>To install the Super JSS library, use the following npm command:</p> <pre><code>npm i super-jss\n</code></pre> <p>This command installs the latest version of Super JSS from npm.</p>"},{"location":"installation/#integration","title":"Integration","text":""},{"location":"installation/#importing-the-directive","title":"Importing the Directive","text":"<p>To integrate Super JSS into your Angular components, follow these steps:</p> <ol> <li>Import the SJSS Directive:</li> </ol> <p>First, import the <code>SjDirective</code> from the Super JSS package.</p> <pre><code>```typescript\nimport { SjDirective } from \"super-jss\";\n```\n</code></pre> <ol> <li>Applying the Directive:</li> </ol> <p>In your Angular component, apply the SJSS directive as shown below. This example sets the background color and padding for a div element.</p> <pre><code>```typescript\n@Component({\n  standalone: true,\n  selector: 'app-demo',\n  template: `\n    &lt;div [sj]=\"{backgroundColor: '#aa5645', padding: '10px'}\"&gt;\n      Welcome to Super JSS!\n    &lt;/div&gt;    \n  `\n})\nexport class DemoComponent {}\n```\n</code></pre> <p>For a live demonstration of Super JSS in action, visit our StackBlitz example.</p> <p>\u2b05\ufe0f Previous: Welcome to Super JSS | Next: Basic Usage \u27a1\ufe0f</p>"},{"location":"palette/","title":"Palette in SJSS","text":""},{"location":"palette/#introduction-to-palette-theming","title":"Introduction to Palette Theming","text":"<p>SJSS uses a theming approach that allows you to define semantic color sets, like primary, secondary, and tertiary, using the provided color palette. This approach ensures consistency in the application's color scheme and enhances the ease of applying styles.</p>"},{"location":"palette/#example-demonstrating-palette-with-shorthand-styles","title":"Example: Demonstrating Palette with Shorthand Styles","text":"<p>It's palette's flexibility allows for easy styling of components with various color themes. Here's an enhanced example showing the use of the palette along with shorthand styles for padding, margin, and more:</p> <pre><code>  import { Component } from \"@angular/core\";\n  import { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-themed-component',\n    template: `\n      &lt;div [sj]=\"{ bg: 'primary.main', color: 'primary.contrast', p: 2, m: 1}\"&gt;\n        Primary Themed Content\n        &lt;div [sj]=\"{ bg: 'secondary.light', color: 'secondary.contrast', p: 1, m: 0.5 }\"&gt;\n          Secondary Light Theme\n        &lt;/div&gt;\n        &lt;div [sj]=\"{ bg: 'success.main', color: 'success.contrast', p: 1, m: 0.5 }\"&gt;\n          Success Theme\n        &lt;/div&gt;\n      &lt;/div&gt;\n    `\n  })\n  export class ThemedComponent {}\n\n</code></pre> <p>In this example: - The outer div is styled with the primary color theme, along with padding (p) and margin (m) for spacing. - The inner divs use the secondary and success color themes, each with their own padding and margin for clear visual separation.</p>"},{"location":"palette/#customizing-the-palette","title":"Customizing the Palette","text":""},{"location":"palette/#structure-and-default-sets","title":"Structure and Default Sets","text":"<p>The default SJSS palette includes semantic color sets like primary, secondary, and success. Each set is structured with main, light, dark, and contrast shades for flexibility.</p>"},{"location":"palette/#updating-the-palette","title":"Updating the Palette","text":"<p>To customize the color sets according to your branding or design preferences:</p> <ol> <li> <p>Accessing the Palette: Utilize the SjThemeService to work with the current palette.</p> </li> <li> <p>Modifying Colors: Use setColors in SjThemeService to update the color sets:</p> </li> </ol> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective, SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-themed-component',\n  template: `\n    &lt;div (click)=\"updateColor()\" [sj]=\"{ bg: 'primary.main', color: 'primary.contrast', p: 2, m: 1}\"&gt;\n      Primary Themed Content\n    &lt;/div&gt;\n  `\n})\nexport class ThemedComponent {\n  constructor(private sjTheme: SjThemeService) {}\n  updateColor(): void {\n    this.sjTheme.setColors({\n      primary: {\n        main: '#ffdb58',\n        light: '#ffecb3',\n        dark: '#ffca28',\n        contrast: '#000000'\n      },\n      // colors from the library may be used as well      \n      tertiary: {\n        main: this.sjTheme.colors.purple,\n        light: this.sjTheme.colors.purple[300],\n        dark: this.sjTheme.colors.purple[700],\n        contrast: this.sjTheme.colors.purple.contrast\n      }\n    });\n  }\n}\n</code></pre> <p>This example showcases how SJSS's theming and shorthand styles enable developers to create visually appealing and consistent designs with ease.</p>"},{"location":"palette/#default-palette-configuration","title":"Default Palette Configuration","text":"<p>The default palette configuration is as follows:</p> theme.palette. main light dark contrast primary blue[500] blue[300] blue[700] yellow[500] secondary orange[500] orange[300] orange[700] blue[300] tertiary red[500] red[300] red[700] white success green[500] green[300] green[700] gray[50] info cyan[500] cyan[300] cyan[700] gray[50] warning orange[500] orange[300] orange[700] gray[50] error red[500] red[300] red[700] gray[50] dark gray[800] gray[600] black gray[50] neutral gray[500] gray[300] gray[700] gray[50] light gray[200] gray[50] gray[400] gray[900]"},{"location":"responsive-style/","title":"Responsive Styling with Breakpoints","text":"<p>Super JavaScript Stylesheets (SJSS) offers a powerful and intuitive approach to implementing responsive designs in Angular applications. Through a system of breakpoints, developers can create styles that adapt seamlessly to various screen sizes.</p>"},{"location":"responsive-style/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Breakpoint Upscaling in SJSS</li> <li>Responsive Styling Example</li> <li>Updating Breakpoints</li> <li>Further Learning Resources</li> </ol>"},{"location":"responsive-style/#breakpoint-upscaling-in-sjss","title":"Breakpoint Upscaling in SJSS","text":"<p>SJSS employs an 'upscaling' approach for breakpoints:</p> <ul> <li>Breakpoint Application: Learn more about breakpoint application</li> <li>Continuity Across Breakpoints: Understand breakpoint continuity</li> <li>Initial Definition: Explore initial style definitions</li> </ul>"},{"location":"responsive-style/#responsive-styling-example","title":"Responsive Styling Example","text":"<p>Here's how to apply responsive styling in an Angular component using SJSS:</p> <pre><code>  import { Component } from \"@angular/core\";\n  import { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-responsive-demo',\n    template: `\n      &lt;div [sj]=\"{\n        p: {\n          xs: '5px',    // Padding for extra small screens\n          md: '10px',   // Padding for medium screens\n          lg: '15px'    // Padding for large screens\n          xl: '20px',   // Padding for extra large screens\n          xxl: '25px'  // Padding for extra extra large screens        \n        },\n        bg: {\n          xs: '#6699ff', // Background color for extra small screens\n          md: '#99ff66', // Background color for medium screens\n          lg: '#ff6699'  // Background color for large screens\n        }\n      }\"&gt;\n        Responsive SJSS Component!\n      &lt;/div&gt;\n    `\n  })\n  export class ResponsiveDemoComponent {}\n</code></pre> <p>For interactive examples and more, visit SJSS on StackBlitz.</p>"},{"location":"responsive-style/#updating-breakpoints","title":"Updating Breakpoints","text":"<p>To customize breakpoints, use the <code>SjThemeService</code> in SJSS, which is particularly powerful and user-friendly due to its use of Angular signals. This approach minimizes boilerplate and simplifies state management.</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective, SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-responsive-demo',\n  template: `\n    &lt;button (click)=\"updateBreakpoints()\" [sj]=\"{ p: 1, bg: 'primary.main', color: 'primary.contrast', borderRadius: '4px', cursor: 'pointer' }\"&gt;\n      Update Breakpoints\n    &lt;/button&gt;\n  `\n})\nexport class ResponsiveDemoComponent {\n  constructor(private sjTheme: SjThemeService) {}\n  updateBreakpoints(): void {\n    this.sjTheme.setTheme({\n      breakpoints: {\n        sm: 660, // optional: a new breakpoint assigned to sm\n        md: 980, // optional: a new breakpoint assigned to md\n        // add lg, xl, or xxl if needed.\n      }\n    });\n  }\n}\n</code></pre> <p>This example demonstrates how to update breakpoints in SJSS. For more examples, visit SJSS on StackBlitz.</p>"},{"location":"responsive-style/#further-learning-resources","title":"Further Learning Resources","text":"<p>For additional information and examples on responsive styling with SJSS, explore the following resources: - SJSS on npm: Detailed package information and installation guide. - Interactive Examples on StackBlitz: Explore hands-on examples and see SJSS in action.</p> <p>\u2b05\ufe0f Previous: Styling Shortcuts | Next: Colors \u27a1\ufe0f</p>"},{"location":"spacing/","title":"Spacing System","text":""},{"location":"spacing/#introduction-to-spacing","title":"Introduction to Spacing","text":"<p>In SJSS, spacing is a versatile feature that allows for consistent and scalable space management throughout your application. Spacing can be applied to various properties like padding, margin, gap, and others, using a simple numeric factor system.</p>"},{"location":"spacing/#default-spacing-configuration","title":"Default Spacing Configuration","text":"<p>The default spacing in SJSS is defined as a function that converts a numeric factor into rem units. This approach ensures uniformity and ease of adjustments across different UI components.</p>"},{"location":"spacing/#using-spacing","title":"Using Spacing","text":"<p>To apply spacing in SJSS, you can use shorthand properties with numeric factors. For example, <code>{ p: 1 }</code> translates to padding of 1 rem.</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-spacing-demo',\n  template: `&lt;div [sj]=\"{ p: 1, m: 2 }\"&gt;Content with padding and margin&lt;/div&gt;`\n})\nexport class SpacingDemoComponent {}\n</code></pre> <p>In this example, <code>p: 1</code> applies 1 rem of padding, and <code>m: 2</code> applies 2 rem of margin to the element.</p>"},{"location":"spacing/#customizing-spacing","title":"Customizing Spacing","text":"<p>You can customize the spacing scale to fit the design needs of your application.</p>"},{"location":"spacing/#updating-spacing","title":"Updating Spacing","text":"<p>The spacing can be updated using the <code>setTheme</code> method of <code>SjThemeService</code>. This method allows you to redefine how the numeric factors are translated into actual spacing values.</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective, SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-spacing-update-demo',\n  template: `\n    &lt;button (click)=\"updateSpacing()\" [sj]=\"{ p: 1, bg: 'primary.main', color: 'primary.contrast', borderRadius: '4px', cursor: 'pointer' }\"&gt;\n      Update Spacing\n    &lt;/button&gt;\n  `\n})\nexport class SpacingUpdateDemoComponent {\n  constructor(private sjTheme: SjThemeService) {}\n  updateSpacing(): void {\n    this.sjTheme.setTheme({\n      spacing: (factor: number) =&gt; `${10 * factor}px` // Example: 1 unit now equals 10px\n    });\n  }\n}\n</code></pre>"},{"location":"spacing/#best-practices","title":"Best Practices","text":"<ul> <li>Use consistent spacing units across your application to maintain a harmonious layout.</li> <li>Choose spacing values that align with your design system or UI guidelines.</li> <li>Consider using multiples of a base unit (like 0.25 rem, 0.5 rem, etc.) for a harmonious and scalable spacing system.</li> </ul> <p>By utilizing SJSS's spacing system, developers can ensure consistent and easy-to-manage spacing throughout their Angular applications, with the flexibility to adjust it as per their design requirements.</p>"},{"location":"styling-shortcuts/","title":"Styling Shorthands and Advanced Properties","text":"<p>Super JavaScript Stylesheets (SJSS) simplifies styling in Angular applications with a range of shorthand properties, covering everything from padding and margin to flexbox layouts.</p>"},{"location":"styling-shortcuts/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Example Usage in a Component</li> <li>Shorthand Properties</li> <li>Padding and Margin</li> <li>Sizes</li> <li>Borders</li> <li>Colors</li> <li>Flexbox</li> <li>Interactive Examples</li> </ol>"},{"location":"styling-shortcuts/#example-usage-in-a-component","title":"Example Usage in a Component","text":"<p>Consider styling a <code>div</code> within an Angular component using SJSS shorthand properties:</p> <pre><code>  import { Component } from \"@angular/core\";\n  import { SjDirective } from \"super-jss\";\n\n  @Component({\n    standalone: true,\n    selector: 'app-shorthand-demo',\n    template: `\n        &lt;div [sj]=\"{\n          py: 1,\n          px: 2,\n          m: 2,\n          b: '1px solid black',\n          d: 'flex',\n          fxJustify: 'center',\n          fxAItems: 'center',\n          bg: '#aa5645'\n        }\"&gt;\n          Welcome to Super JSS!\n        &lt;/div&gt;\n      `\n})\nexport class ShorthandDemoComponent {}\n</code></pre> <p>For interactive examples and more detailed usage, visit SJSS on StackBlitz.</p> <p>Now, let's delve into the details of these shorthand properties.</p> <ul> <li>note: they are just shorthands, you can use the full css property in camelCase if you prefer. The <code>px</code>, <code>py</code>, <code>mx</code>, <code>my</code>, <code>bx</code>, and <code>by</code> shorthands are processed directly by the <code>SjDirective</code> for convenience.</li> </ul>"},{"location":"styling-shortcuts/#padding-and-margin","title":"Padding and Margin","text":"Shorthand CSS Property Description <code>p</code> <code>padding</code> Padding on all sides <code>pt</code> <code>paddingTop</code> Padding top <code>pr</code> <code>paddingRight</code> Padding right <code>pb</code> <code>paddingBottom</code> Padding bottom <code>pl</code> <code>paddingLeft</code> Padding left <code>m</code> <code>margin</code> Margin on all sides <code>mt</code> <code>marginTop</code> Margin top <code>mr</code> <code>marginRight</code> Margin right <code>mb</code> <code>marginBottom</code> Margin bottom <code>ml</code> <code>marginLeft</code> Margin left <code>px</code> <code>paddingLeft</code>, <code>paddingRight</code> Horizontal padding <code>py</code> <code>paddingTop</code>, <code>paddingBottom</code> Vertical padding <code>mx</code> <code>marginLeft</code>, <code>marginRight</code> Horizontal margin <code>my</code> <code>marginTop</code>, <code>marginBottom</code> Vertical margin"},{"location":"styling-shortcuts/#sizes","title":"Sizes","text":"Shorthand CSS Property Description <code>w</code> <code>width</code> Width <code>h</code> <code>height</code> Height <code>minW</code> <code>minWidth</code> Minimum width <code>minH</code> <code>minHeight</code> Minimum height <code>maxW</code> <code>maxWidth</code> Maximum width <code>maxH</code> <code>maxHeight</code> Maximum height"},{"location":"styling-shortcuts/#borders","title":"Borders","text":"Shorthand CSS Property Description <code>b</code> <code>border</code> Border on all sides <code>bt</code> <code>borderTop</code> Border top <code>br</code> <code>borderRight</code> Border right <code>bb</code> <code>borderBottom</code> Border bottom <code>bl</code> <code>borderLeft</code> Border left <code>bs</code> <code>borderStyle</code> Border style <code>bw</code> <code>borderWidth</code> Border width <code>bc</code> <code>borderColor</code> Border color <code>brad</code> <code>borderRadius</code> Border radius <code>bx</code> <code>borderLeft</code>, <code>borderRight</code> Horizontal borders <code>by</code> <code>borderTop</code>, <code>borderBottom</code> Vertical borders"},{"location":"styling-shortcuts/#colors","title":"Colors","text":"Shorthand CSS Property Description <code>bg</code> <code>backgroundColor</code> Background color <code>c</code> <code>color</code> Text color"},{"location":"styling-shortcuts/#flexbox","title":"Flexbox","text":"Shorthand CSS Property Description <code>d</code> <code>display</code> Display property <code>fxDir</code> <code>flexDirection</code> Flex direction <code>fxWrap</code> <code>flexWrap</code> Flex wrap <code>fxFlow</code> <code>flexFlow</code> Flex flow <code>fxJustify</code> <code>justifyContent</code> Justify content <code>fxAItems</code> <code>alignItems</code> Align items <code>fxAContent</code> <code>alignContent</code> Align content <code>fxOrder</code> <code>order</code> Flex item order <code>fxGrow</code> <code>flexGrow</code> Flex grow <code>fxShrink</code> <code>flexShrink</code> Flex shrink <code>fxBasis</code> <code>flexBasis</code> Flex basis <code>fxASelf</code> <code>alignSelf</code> Align self <p>\u2b05\ufe0f Previous: Basic Usage | Next: Responsive Styling \u27a1\ufe0f</p>"},{"location":"theming/","title":"Comprehensive Theming System","text":"<p>Super JSS provides a robust theming system that allows you to define and switch themes dynamically in your Angular applications. Theming is essential for creating consistent styling across your application and for enabling features like dark mode.</p>"},{"location":"theming/#defining-a-theme","title":"Defining a Theme","text":"<p>YouYou can define a theme as a set of style properties that can be applied globally across your application. Themes in SJSS conform to the <code>SjTheme</code> interface.</p> <pre><code>// src/app/my-custom-theme.ts\nimport { SjTheme, defaultTheme, deepMerge } from 'super-jss';\n\nexport const myCustomTheme: Partial&lt;SjTheme&gt; = deepMerge(defaultTheme, {\n  palette: {\n    primary: {\n      main: '#6200EE', // A custom primary color (Deep Purple)\n      light: '#9E47FF',\n      dark: '#0000AA',\n      contrast: '#FFFFFF',\n    },\n    secondary: {\n      main: '#03DAC6', // A custom secondary color (Teal)\n      light: '#66FFF9',\n      dark: '#00A896',\n      contrast: '#000000',\n    },\n  },\n  // You can override other theme properties like breakpoints, typography, spacing, etc.\n});\n</code></pre> <p>(Note: <code>deepMerge</code> is an internal utility of the <code>super-jss</code> library. For external use, you might need to implement your own deep merge function or manually construct the theme object.)</p>"},{"location":"theming/#applying-a-theme","title":"Applying a Theme","text":"<p>SJSS offers two primary ways to apply a theme:</p>"},{"location":"theming/#1-initial-theme-provision-at-application-startup","title":"1. Initial Theme Provision (at application startup)","text":"<p>To set a theme for your entire application at startup, provide it using the <code>SJ_THEME</code> injection token. This is typically done in your <code>main.ts</code> file for standalone applications or in your root <code>AppModule</code> for NgModule-based applications.</p> <pre><code>// src/main.ts (for standalone applications)\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { SJ_THEME } from 'super-jss'; // Import the injection token\nimport { myCustomTheme } from './app/my-custom-theme'; // Your custom theme\n\nbootstrapApplication(AppComponent, {\n  providers: [\n    { provide: SJ_THEME, useValue: myCustomTheme }\n  ]\n}).catch(err =&gt; console.error(err));\n</code></pre>"},{"location":"theming/#2-dynamic-theme-updates-at-runtime","title":"2. Dynamic Theme Updates (at runtime)","text":"<p>To change the theme dynamically based on user interaction, application state, or other logic, use the <code>SjThemeService</code>.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective, SjThemeService, defaultTheme } from 'super-jss';\nimport { myCustomTheme } from './my-custom-theme'; // Your custom theme\n\n@Component({\n  standalone: true,\n  selector: 'app-theme-switcher',\n  template: `\n    &lt;button (click)=\"toggleTheme()\" [sj]=\"{ p: 1, bg: 'primary.main', color: 'primary.contrast', borderRadius: '4px', cursor: 'pointer' }\"&gt;\n      Toggle Theme\n    &lt;/button&gt;\n  `,\n})\nexport class ThemeSwitcherComponent {\n  isCustomThemeActive = false;\n\n  constructor(private sjThemeService: SjThemeService) {}\n\n  toggleTheme(): void {\n    this.isCustomThemeActive = !this.isCustomThemeActive;\n    const themeToApply = this.isCustomThemeActive ? myCustomTheme : defaultTheme;\n    this.sjThemeService.setTheme(themeToApply);\n  }\n}\n</code></pre>"},{"location":"theming/#theme-aware-pseudo-selectors","title":"Theme-aware Pseudo-selectors","text":"<p>SJSS allows you to define styles for pseudo-selectors (like <code>:hover</code>, <code>:active</code>, <code>:focus</code>) directly within your <code>[sj]</code> attribute. These pseudo-selector styles can also leverage your defined theme colors and properties.</p> <pre><code>import { Component } from '@angular/core';\nimport { SjDirective } from 'super-jss';\n\n@Component({\n  standalone: true,\n  selector: 'app-themed-button',\n  template: `\n    &lt;button [sj]=\"{\n      p: 1,\n      bg: 'primary.main',\n      color: 'primary.contrast',\n      borderRadius: '4px',\n      cursor: 'pointer',\n      transition: 'all 0.3s ease-in-out',\n      '&amp;:hover': {\n        bg: 'primary.dark', // Uses theme's dark shade of primary\n        boxShadow: '0 4px 8px rgba(0,0,0,0.2)'\n      },\n      '&amp;:active': {\n        transform: 'scale(0.98)'\n      }\n    }\"&gt;\n      Themed Button\n    &lt;/button&gt;\n  `,\n})\nexport class ThemedButtonComponent {}\n</code></pre>"},{"location":"theming/#conclusion","title":"Conclusion","text":"<p>By following these steps, you can effectively define, apply, and dynamically switch themes in your Super JSS application, ensuring a consistent and customizable user experience.</p>"},{"location":"theming/#interactive-theming-demo","title":"Interactive Theming Demo","text":"<p>\u2b05\ufe0f Previous: Typography | Next: Examples \u27a1\ufe0f</p>"},{"location":"typography/","title":"Typography System","text":"<p>SJSS offers a robust typography system that allows for the customization of text styles across various HTML elements.</p>"},{"location":"typography/#using-typography-in-components","title":"Using Typography in Components","text":"<p>To apply these typography styles in SJSS, you can use the <code>[sj]</code> directive in your Angular components. For example:</p> <pre><code>&lt;p [sj]&gt;This paragraph will use SJSS default styling.&lt;/p&gt;\n&lt;p [sj]=\"{ c: 'primary.main' }\"&gt;This paragraph will have the primary color.&lt;/p&gt;\n\n</code></pre> <p>In these examples, the first paragraph will be rendered with the default SJSS styling for <code>&lt;p&gt;</code> elements. The second paragraph will additionally have a text color corresponding to the primary color from the palette.</p>"},{"location":"typography/#typography-default-styles","title":"Typography Default Styles","text":"<p>SJSS provides default styles for various HTML elements. These styles are defined in the <code>SjThemeService</code> and can be customized as per your application's needs. The following table lists the default typography styles in SJSS:</p> Element Font-Size (xs/md) Font-Weight Line-Height Default 1rem Normal 1.6 H1 2.5rem / 3.5rem 600 4 H2 2rem / 3rem 600 3.5 H3 1.75rem / 2.5rem 600 3 H4 1.5rem / 2rem 600 2 H5 1.25rem / 1.75rem 600 2 H6 1rem / 1.25rem 600 1.5 P 1rem Normal 1.4 SPAN 0.9rem Normal 1.2 STRONG 1rem Bold 1.2 BODY 1rem Normal 1.2 CAPTION 0.8rem Normal 1.2 <p>This table provides a comprehensive guide to the default typography settings in SJSS. Users can rely on this data to understand how text will be styled by default and make informed decisions about customizing these styles.</p>"},{"location":"typography/#customizing-typography","title":"Customizing Typography","text":"<p>SJSS allows for easy customization of typography styles. You can use the <code>SjThemeService</code> to update the default typography settings.</p> <pre><code>import { Component } from \"@angular/core\";\nimport { SjDirective, SjThemeService } from \"super-jss\";\n\n@Component({\n  standalone: true,\n  selector: 'app-typography-update-demo',\n  template: `\n    &lt;button (click)=\"updateFont()\" [sj]=\"{ p: 1, bg: 'primary.main', color: 'primary.contrast', borderRadius: '4px', cursor: 'pointer' }\"&gt;\n      Update H3 Font\n    &lt;/button&gt;\n  `\n})\nexport class TypographyUpdateDemoComponent {\n  constructor(private sjTheme: SjThemeService) {}\n  updateFont(): void {\n    this.sjTheme.setTheme({\n      typography: {\n        H3: {\n          fontSize: '2rem',\n          fontWeight: '600',\n          lineHeight: 3\n        }\n      }\n    });\n  }\n}\n</code></pre> <p>\u2b05\ufe0f Previous: Responsive Styles | Next: Theming \u27a1\ufe0f</p>"}]}