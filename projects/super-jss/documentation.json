{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "SjBasicArrayExampleComponent",
            "id": "component-SjBasicArrayExampleComponent-6a37c544912fe691c198327a8f8214f15b88e8ca5b384ba1aa4a454ff18dedb513dda7ec5f574f1f3b729756f33f34a63b9238f1a8dcb085ca0044e1727cfe82",
            "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-sj-basic-array",
            "styleUrls": [],
            "styles": [],
            "template": "<div [sj]=\"styles\">\n  bound to class property typed as SjStyle[] (merged left→right)\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "styles",
                    "defaultValue": "[\n    { padding: '12px' },\n    { backgroundColor: '#f7f7f7' },\n    { borderRadius: '6px' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SjStyle[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "SjDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\nimport { moduleMetadata } from '@storybook/angular';\nimport { Component } from '@angular/core';\nimport { SjDirective } from 'super-jss';\nimport type { SjStyle } from 'super-jss';\n\n@Component({\n  standalone: true,\n  selector: 'story-sj-basic-class',\n  imports: [SjDirective],\n  template: ` <div [sj]=\"box\">bound to class property typed as SjStyle</div> `,\n})\nclass SjBasicClassExampleComponent {\n  box: SjStyle = {\n    padding: '20px',\n    backgroundColor: '#eeeeee',\n    borderRadius: '8px',\n  };\n}\n\n@Component({\n  standalone: true,\n  selector: 'story-sj-basic-array',\n  imports: [SjDirective],\n  template: `\n    <div [sj]=\"styles\">\n      bound to class property typed as SjStyle[] (merged left→right)\n    </div>\n  `,\n})\nclass SjBasicArrayExampleComponent {\n  styles: SjStyle[] = [\n    { padding: '12px' },\n    { backgroundColor: '#f7f7f7' },\n    { borderRadius: '6px' },\n  ];\n}\n\nconst meta: Meta = {\n  title: 'SJ/[sj] Basic',\n  decorators: [\n    moduleMetadata({\n      imports: [\n        SjDirective,\n        SjBasicClassExampleComponent,\n        SjBasicArrayExampleComponent,\n      ],\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          '[sj] is a lightweight Angular directive that lets you author styles as plain JavaScript objects directly in your templates.\\n\\nKey ideas:\\n- Use camelCase CSS properties (e.g., padding, backgroundColor).\\n- Values can be raw CSS (px, rem, hex) or theme tokens — start with raw CSS here.\\n- Inline or class property: bind a literal object, or a component field typed as `SjStyle` or `SjStyle[]`.\\n- You can pass a single object, an array of objects (merged left→right), or responsive objects like { xs, sm, md, ... }.\\n- The library generates tiny atomic CSS classes at runtime; no global CSS needed.\\n\\nThese first examples avoid theming to show the most basic form.',\n      },\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Padding: Story = {\n  name: 'Padding (simple object)',\n  render: () => ({\n    props: {},\n    template: `\n      <div [sj]=\"{ padding: '24px', backgroundColor: '#f7f7f7', borderRadius: '8px' }\">\n        div with padding: 24px (plain CSS units)\n      </div>\n    `,\n  }),\n};\n\nexport const ResponsivePadding: Story = {\n  name: 'Padding (responsive object)',\n  render: () => ({\n    props: {},\n    template: `\n      <div [sj]=\"{\n        padding: { xs: '16px', sm: '24px', md: '32px' },\n        backgroundColor: '#f7f7f7',\n        borderRadius: '8px'\n      }\">\n        div with responsive padding: xs=16px, sm=24px, md=32px\n      </div>\n    `,\n  }),\n};\n\nexport const ClassPropertySjStyle: Story = {\n  name: 'Class property (SjStyle)',\n  render: () => ({ props: {}, template: `<story-sj-basic-class></story-sj-basic-class>` }),\n  parameters: { docs: { disable: true } },\n};\n\nexport const ClassPropertySjStyleArray: Story = {\n  name: 'Class property (SjStyle[])',\n  render: () => ({ props: {}, template: `<story-sj-basic-array></story-sj-basic-array>` }),\n  parameters: { docs: { disable: true } },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "SjBasicClassExampleComponent",
            "id": "component-SjBasicClassExampleComponent-6a37c544912fe691c198327a8f8214f15b88e8ca5b384ba1aa4a454ff18dedb513dda7ec5f574f1f3b729756f33f34a63b9238f1a8dcb085ca0044e1727cfe82",
            "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-sj-basic-class",
            "styleUrls": [],
            "styles": [],
            "template": "<div [sj]=\"box\">bound to class property typed as SjStyle</div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "box",
                    "defaultValue": "{\n    padding: '20px',\n    backgroundColor: '#eeeeee',\n    borderRadius: '8px',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SjStyle",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "SjDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import type { Meta, StoryObj } from '@storybook/angular';\nimport { moduleMetadata } from '@storybook/angular';\nimport { Component } from '@angular/core';\nimport { SjDirective } from 'super-jss';\nimport type { SjStyle } from 'super-jss';\n\n@Component({\n  standalone: true,\n  selector: 'story-sj-basic-class',\n  imports: [SjDirective],\n  template: ` <div [sj]=\"box\">bound to class property typed as SjStyle</div> `,\n})\nclass SjBasicClassExampleComponent {\n  box: SjStyle = {\n    padding: '20px',\n    backgroundColor: '#eeeeee',\n    borderRadius: '8px',\n  };\n}\n\n@Component({\n  standalone: true,\n  selector: 'story-sj-basic-array',\n  imports: [SjDirective],\n  template: `\n    <div [sj]=\"styles\">\n      bound to class property typed as SjStyle[] (merged left→right)\n    </div>\n  `,\n})\nclass SjBasicArrayExampleComponent {\n  styles: SjStyle[] = [\n    { padding: '12px' },\n    { backgroundColor: '#f7f7f7' },\n    { borderRadius: '6px' },\n  ];\n}\n\nconst meta: Meta = {\n  title: 'SJ/[sj] Basic',\n  decorators: [\n    moduleMetadata({\n      imports: [\n        SjDirective,\n        SjBasicClassExampleComponent,\n        SjBasicArrayExampleComponent,\n      ],\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          '[sj] is a lightweight Angular directive that lets you author styles as plain JavaScript objects directly in your templates.\\n\\nKey ideas:\\n- Use camelCase CSS properties (e.g., padding, backgroundColor).\\n- Values can be raw CSS (px, rem, hex) or theme tokens — start with raw CSS here.\\n- Inline or class property: bind a literal object, or a component field typed as `SjStyle` or `SjStyle[]`.\\n- You can pass a single object, an array of objects (merged left→right), or responsive objects like { xs, sm, md, ... }.\\n- The library generates tiny atomic CSS classes at runtime; no global CSS needed.\\n\\nThese first examples avoid theming to show the most basic form.',\n      },\n    },\n  },\n};\n\nexport default meta;\ntype Story = StoryObj;\n\nexport const Padding: Story = {\n  name: 'Padding (simple object)',\n  render: () => ({\n    props: {},\n    template: `\n      <div [sj]=\"{ padding: '24px', backgroundColor: '#f7f7f7', borderRadius: '8px' }\">\n        div with padding: 24px (plain CSS units)\n      </div>\n    `,\n  }),\n};\n\nexport const ResponsivePadding: Story = {\n  name: 'Padding (responsive object)',\n  render: () => ({\n    props: {},\n    template: `\n      <div [sj]=\"{\n        padding: { xs: '16px', sm: '24px', md: '32px' },\n        backgroundColor: '#f7f7f7',\n        borderRadius: '8px'\n      }\">\n        div with responsive padding: xs=16px, sm=24px, md=32px\n      </div>\n    `,\n  }),\n};\n\nexport const ClassPropertySjStyle: Story = {\n  name: 'Class property (SjStyle)',\n  render: () => ({ props: {}, template: `<story-sj-basic-class></story-sj-basic-class>` }),\n  parameters: { docs: { disable: true } },\n};\n\nexport const ClassPropertySjStyleArray: Story = {\n  name: 'Class property (SjStyle[])',\n  render: () => ({ props: {}, template: `<story-sj-basic-array></story-sj-basic-array>` }),\n  parameters: { docs: { disable: true } },\n};\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "Accessibility",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    props: { sj, icon },\n    template: `\n      <div [sj]=\"[ sj.d('flex'), sj.fxDir('column'), sj.gap(1) ]\">\n        <div>\n          <p>This icon is decorative and is hidden from screen readers:</p>\n          <sj-icon [name]=\"icon.sun\"></sj-icon>\n        </div>\n        <div>\n          <p>This icon has a label and is announced by screen readers:</p>\n          <sj-icon [name]=\"icon.moon\" label=\"Moon icon\"></sj-icon>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Alignment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [sj]=\"[{ justifyContent: 'space-between', alignItems: 'center' }, sj.minH(6), sj.p(0.5) ]\">\n        <div [sj]=\"[ sj.p(0.5), sj.bg('primary.light'), sj.brad(0.5) ]\">Left</div>\n        <div [sj]=\"[ sj.p(0.5), sj.bg('secondary.light'), sj.brad(0.5) ]\">Right</div>\n      </sj-flex>\n    `,\n  }),\n}"
            },
            {
                "name": "AllIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    props: { sj, iconNames: Object.values(icon) },\n    template: `\n      <div [sj]=\"[ sj.d('grid'), sj.gridTemplateColumns('repeat(auto-fit, minmax(140px, 1fr))'), sj.gap(0.75) ]\">\n        <div *ngFor=\"let n of iconNames\" [sj]=\"[ sj.d('flex'), sj.fxDir('column'), sj.fxAItems('center'), sj.gap(0.25), sj.p(0.5), sj.bg('light.light'), sj.brad(0.5) ]\">\n          <sj-icon [name]=\"n\" size=\"2rem\"></sj-icon>\n          <code [sj]=\"[ sj.fs('0.8rem'), sj.c('neutral.dark') ]\">{{ n }}</code>\n        </div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "AllVariants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display:flex; flex-direction:column; gap:8px\">\n        <sj-typography variant=\"h1\">Heading 1</sj-typography>\n        <sj-typography variant=\"h2\">Heading 2</sj-typography>\n        <sj-typography variant=\"h3\">Heading 3</sj-typography>\n        <sj-typography variant=\"h4\">Heading 4</sj-typography>\n        <sj-typography variant=\"h5\">Heading 5</sj-typography>\n        <sj-typography variant=\"h6\">Heading 6</sj-typography>\n        <sj-typography variant=\"p\">Paragraph text</sj-typography>\n        <sj-typography variant=\"span\">Span text</sj-typography>\n        <sj-typography variant=\"strong\">Strong text</sj-typography>\n        <sj-typography variant=\"small\">Small text</sj-typography>\n        <sj-typography variant=\"pre\">preformatted</sj-typography>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "BasicRow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    playgroundSj: {\n      padding: '2px',\n    },\n  },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [sj]=\"[ sj.p(3) ]\">\n        <div [sj]=\"[ sj.p(0.5), sj.bg('primary.light'), sj.brad(0.5) ]\">One</div>\n        <div [sj]=\"[ sj.p(0.5), sj.bg('secondary.light'), sj.brad(0.5) ]\">Two</div>\n      </sj-flex>\n    `,\n  }),\n}"
            },
            {
                "name": "ClassPropertySjStyle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Class property (SjStyle)',\n  render: () => ({ props: {}, template: `<story-sj-basic-class></story-sj-basic-class>` }),\n  parameters: { docs: { disable: true } },\n}"
            },
            {
                "name": "ClassPropertySjStyleArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Class property (SjStyle[])',\n  render: () => ({ props: {}, template: `<story-sj-basic-array></story-sj-basic-array>` }),\n  parameters: { docs: { disable: true } },\n}"
            },
            {
                "name": "ColumnCentered",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { useCol: true, useCenter: true, useGap: 'default' },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [useCol]=\"useCol\" [useCenter]=\"useCenter\" [useGap]=\"useGap\">\n        <div [sj]=\"[ sj.p(0.5), sj.bg('primary.light'), sj.brad(0.5) ]\">One</div>\n        <div [sj]=\"[ sj.p(0.5), sj.bg('secondary.light'), sj.brad(0.5) ]\">Two</div>\n      </sj-flex>\n    `,\n  }),\n}"
            },
            {
                "name": "ComponentPolymorphism",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { component: 'section', useGap: 2 },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [component]=\"component\" [useGap]=\"useGap\" [sj]=\"[ sj.bg('light.light') ]\">\n        <div [sj]=\"[ sj.p(0.5), sj.bg('primary.light'), sj.brad(0.5) ]\">Section tag</div>\n        <div [sj]=\"[ sj.p(0.5), sj.bg('secondary.light'), sj.brad(0.5) ]\">With gap 2</div>\n      </sj-flex>\n    `,\n  }),\n}"
            },
            {
                "name": "DensityGap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { useGap: 'comfortable' },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [useGap]=\"useGap\">\n        <div [sj]=\"[ sj.p(0.5), sj.bg('primary.light'), sj.brad(0.5) ]\">A</div>\n        <div [sj]=\"[ sj.p(0.5), sj.bg('secondary.light'), sj.brad(0.5) ]\">B</div>\n        <div [sj]=\"[ sj.p(0.5), sj.bg('info.light'), sj.brad(0.5) ]\">C</div>\n      </sj-flex>\n    `,\n  }),\n}"
            },
            {
                "name": "DensityPadding",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { usePadding: 'compact' },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [usePadding]=\"usePadding\">\n        <div [sj]=\"[ sj.bg('primary.light') ]\">A</div>\n        <div [sj]=\"[ sj.bg('secondary.light') ]\">B</div>\n        <div [sj]=\"[ sj.bg('info.light') ]\">C</div>\n      </sj-flex>\n    `,\n  }),\n}"
            },
            {
                "name": "Filled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { variant: 'filled', useDensity: 2 },\n  render: (args) => ({\n    props: args,\n    template: `<sj-button [variant]=\"variant\" [useDensity]=\"useDensity\">Click me</sj-button>`,\n  }),\n}"
            },
            {
                "name": "Flat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { variant: 'flat', useDensity: 2 },\n  render: (args) => ({\n    props: args,\n    template: `<sj-button [variant]=\"variant\" [useDensity]=\"useDensity\">Flat</sj-button>`,\n  }),\n}"
            },
            {
                "name": "Flat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-paper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { variant: 'flat', usePadding: 'default', useRounded: 'default' },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `<sj-paper [variant]=\"variant\" [usePadding]=\"usePadding\" [useRounded]=\"useRounded\">Flat paper</sj-paper>`,\n  }),\n}"
            },
            {
                "name": "InteractiveAccessibility",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem;\">\n        <a href=\"#\" style=\"text-decoration: none; color: inherit;\">\n          <sj-card variant=\"interactive\" usePadding=\"default\" useRounded=\"default\">\n            <h3>Navigational Card</h3>\n            <p>This card is wrapped in an anchor tag and navigates on click.</p>\n          </sj-card>\n        </a>\n        <sj-card variant=\"interactive\" usePadding=\"default\" useRounded=\"default\" role=\"button\" tabindex=\"0\" (click)=\"onClick()\">\n          <h3>Action Card</h3>\n          <p>This card has a role of \"button\" and a click handler.</p>\n        </sj-card>\n      </div>\n    `,\n    props: {\n      onClick: () => alert('Card clicked!'),\n    },\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'SJ/Button',\n  component: SjButtonComponent as any,\n  decorators: [moduleMetadata({ imports: [SjDirective] })],\n  argTypes: {\n    variant: { control: 'select', options: ['filled', 'outlined', 'flat'] },\n    useDensity: { control: { type: 'number', min: 1, max: 4, step: 1 } },\n    useFullWidth: { control: 'boolean' },\n    useRounded: { control: 'select', options: [1, 2, 3, 4, 'compact', 'default', 'comfortable', 'spacious', 'none'] },\n    usePaint: { control: 'select', options: ['primary', 'secondary', 'success', 'info', 'warning', 'error', 'dark', 'neutral', 'light', 'auto', 'none'] },\n    sj: {\n      control: 'object',\n      table: { type: { summary: 'SjStyle | SjStyle[]' } },\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SjCardComponent>",
                "defaultValue": "{\n  title: 'SJ/Card',\n  component: SjCardComponent,\n  argTypes: {\n    variant: { control: 'select', options: ['flat', 'outlined', 'elevated', 'interactive'] },\n    usePaint: {\n      control: 'select',\n      options: ['none', 'auto', 'primary', 'secondary', 'success', 'info', 'warning', 'error', 'dark', 'neutral', 'light'],\n    },\n    usePadding: { control: 'select', options: [undefined, 'none', 1, 2, 3, 4, 'compact', 'default', 'comfortable', 'spacious'] },\n    useRounded: { control: 'select', options: [undefined, 'none', 1, 2, 3, 4, 'compact', 'default', 'comfortable', 'spacious'] },\n    sj: { control: 'object' },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'SJ/[sj] Basic',\n  decorators: [\n    moduleMetadata({\n      imports: [\n        SjDirective,\n        SjBasicClassExampleComponent,\n        SjBasicArrayExampleComponent,\n      ],\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          '[sj] is a lightweight Angular directive that lets you author styles as plain JavaScript objects directly in your templates.\\n\\nKey ideas:\\n- Use camelCase CSS properties (e.g., padding, backgroundColor).\\n- Values can be raw CSS (px, rem, hex) or theme tokens — start with raw CSS here.\\n- Inline or class property: bind a literal object, or a component field typed as `SjStyle` or `SjStyle[]`.\\n- You can pass a single object, an array of objects (merged left→right), or responsive objects like { xs, sm, md, ... }.\\n- The library generates tiny atomic CSS classes at runtime; no global CSS needed.\\n\\nThese first examples avoid theming to show the most basic form.',\n      },\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'SJ/[sj] Basic + Shortcuts',\n  decorators: [moduleMetadata({ imports: [SjDirective] })],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          'Popular shorthand keys for common CSS: p, px, py, m, mx, my, brad, bg, c, w, h, d, fxDir, fxJustify, fxAItems, gap.\\n' +\n          'Shorthands are authoring sugar — the generator outputs full CSS behind the scenes. These examples still use plain CSS values (no theming).',\n      },\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'SJ/Flex',\n  component: SjFlexComponent as any,\n  parameters: {\n    docs: {\n      description: {\n        component:\n          'A powerful and flexible layout component. Use the `use*` inputs for common flexbox patterns and density adjustments. For fine-grained control, including responsive layouts and properties like `justifyContent` or `alignItems`, use the `[sj]` input.',\n      },\n    },\n  },\n  decorators: [moduleMetadata({ imports: [SjDirective] })],\n  argTypes: {\n    component: {\n      control: 'select',\n      options: ['div', 'section', 'article', 'span'],\n    },\n    host: { control: 'boolean' },\n    useCol: { control: 'boolean' },\n    useWrap: { control: 'boolean' },\n    useInline: { control: 'boolean' },\n    useCenter: { control: 'boolean' },\n    useBetween: { control: 'boolean' },\n    useAround: { control: 'boolean' },\n    useEvenly: { control: 'boolean' },\n\n    useGap: {\n      control: 'select',\n      options: [\n        undefined,\n        'none',\n        1,\n        2,\n        3,\n        4,\n        'compact',\n        'default',\n        'comfortable',\n        'spacious',\n      ],\n    },\n    usePadding: {\n      control: 'select',\n      options: [\n        undefined,\n        'none',\n        1,\n        2,\n        3,\n        4,\n        'compact',\n        'default',\n        'comfortable',\n        'spacious',\n      ],\n    },\n    // Playground-only: allow testing the [sj] input with object or array\n    playgroundSj: {\n      control: 'object',\n      description:\n        'Use this to pass any style object to the component. This is the primary way to apply detailed styles like `justifyContent`, `alignItems`, or responsive values. E.g., `{ justifyContent: \"flex-end\" }`.',\n      table: {\n        category: 'Playground',\n        type: { summary: 'SjStyle | SjStyle[]' },\n      },\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'SJ/Icon',\n  component: SjIconComponent as any,\n  decorators: [moduleMetadata({ imports: [SjIconComponent, SjDirective] })],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          '<sj-icon> renders theme-aware SVG icons. Size is controlled by the host via `size` (px/rem). Colors accept palette tokens or raw CSS.',\n      },\n    },\n  },\n  argTypes: {\n    name: { control: 'select', options: Object.values(icon) as any },\n    size: { control: 'text', table: { type: { summary: 'string | number' } } },\n    fill: { control: 'text' },\n    stroke: { control: 'text' },\n    fillOpacity: { control: { type: 'number', min: 0, max: 1, step: 0.05 } },\n    strokeOpacity: { control: { type: 'number', min: 0, max: 1, step: 0.05 } },\n    sj: { control: 'object' },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'SJ/Input',\n  component: SjInputComponent as any,\n  decorators: [moduleMetadata({ imports: [SjPaperComponent, SjDirective, SjIconComponent] })],\n  argTypes: {\n    variant: { control: 'select', options: ['outlined', 'filled', 'flat'] },\n    type: { control: 'select', options: ['text', 'email', 'password', 'search', 'number', 'url'] },\n    placeholder: { control: 'text' },\n    value: { control: 'text' },\n    usePadding: {\n      control: 'select',\n      options: [undefined, 'none', 1, 2, 3, 4, 'compact', 'default', 'comfortable', 'spacious'],\n    },\n    useRounded: {\n      control: 'select',\n      options: [undefined, 'none', 1, 2, 3, 4, 'compact', 'default', 'comfortable', 'spacious'],\n    },\n    usePaint: {\n      control: 'select',\n      options: ['none', 'auto', 'primary', 'secondary', 'success', 'info', 'warning', 'error', 'dark', 'neutral', 'light'],\n    },\n    fullWidth: { control: 'boolean' },\n    disabled: { control: 'boolean' },\n    invalid: { control: 'boolean' },\n    sj: { control: 'object' },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-paper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'SJ/Paper',\n  component: SjPaperComponent as any,\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['default', 'flat', 'outlined', 'filled'],\n    },\n    component: { control: 'select', options: ['div', 'section', 'article'] },\n    usePaint: {\n      control: 'select',\n      options: [\n        'none',\n        'auto',\n        'primary',\n        'secondary',\n        'success',\n        'info',\n        'warning',\n        'error',\n        'dark',\n        'neutral',\n        'light',\n      ],\n      table: {\n        category: 'Surface',\n        type: { summary: `'none' | 'auto' | palette family` },\n      },\n      description:\n        'Full paint override. For subtle tints prefer [useBg] or future useTint.',\n    },\n    usePadding: {\n      control: 'select',\n      options: [\n        'none',\n        'compact',\n        'default',\n        'comfortable',\n        'spacious',\n        1,\n        2,\n        3,\n        4,\n      ],\n    },\n    useRounded: {\n      control: 'select',\n      options: [\n        'none',\n        'compact',\n        'default',\n        'comfortable',\n        'spacious',\n        1,\n        2,\n        3,\n        4,\n      ],\n    },\n    playgroundSj: {\n      control: 'object',\n      description:\n        'Use this to pass any style object to the component for live testing. This input always has the final say in styling.',\n      table: {\n        category: 'Playground',\n        type: { summary: 'SjStyle | SjStyle[]' },\n      },\n    },\n    // Colors are set via [sj] (e.g., sj.bg('primary.light'), sj.c('primary.contrast'))\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-root-api-tokens.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'SJ/sjRootApi + Theming & Tokens',\n  decorators: [moduleMetadata({ imports: [SjDirective] })],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          'Use theme palette tokens and `.options` for discoverable, theme-aware styling. Also shows sj.compose for merging style parts.',\n      },\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta",
                "defaultValue": "{\n  title: 'SJ/sjRootApi Basic',\n  decorators: [moduleMetadata({ imports: [SjDirective] })],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          'The `sj` root API exposes every CSS property as a typed function and a small set of curated shorthands.\\n' +\n          'Use it inline for great IDE autocomplete in Angular templates. These basic examples use plain CSS values (no theming).',\n      },\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SjTypographyComponent>",
                "defaultValue": "{\n  title: 'SJ/Typography',\n  component: SjTypographyComponent,\n  argTypes: {\n    variant: { control: 'select', options: ['h1','h2','h3','h4','h5','h6','p','span','strong','small','pre','body'] },\n    sj: { control: 'object' },\n  },\n}"
            },
            {
                "name": "MixingFunctionsAndObjects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Mixing sj.* and literal objects',\n  render: () => ({\n    props: { sj },\n    template: `\n      <div [sj]=\"[ sj.padding('12px'), { backgroundColor: 'red', marginTop: '2px', borderRadius: '6px', color: '#fff' } ]\">\n        [sj] can take an array mixing sj.* helpers and plain objects\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Outlined",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { variant: 'outlined', useDensity: 2 },\n  render: (args) => ({\n    props: args,\n    template: `<sj-button [variant]=\"variant\" [useDensity]=\"useDensity\">Outlined</sj-button>`,\n  }),\n}"
            },
            {
                "name": "Outlined",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-paper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'outlined',\n    usePaint: 'none',\n    usePadding: 'comfortable',\n    useRounded: 'comfortable',\n  },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `<sj-paper [variant]=\"variant\" [usePaint]=\"usePaint\" [usePadding]=\"usePadding\" [useRounded]=\"useRounded\">Outlined paper</sj-paper>`,\n  }),\n}"
            },
            {
                "name": "Padding",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Padding (simple object)',\n  render: () => ({\n    props: {},\n    template: `\n      <div [sj]=\"{ padding: '24px', backgroundColor: '#f7f7f7', borderRadius: '8px' }\">\n        div with padding: 24px (plain CSS units)\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'filled',\n    useDensity: 2,\n    useFullWidth: false,\n    useRounded: 2,\n    usePaint: 'auto',\n    sj: undefined,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 20rem\">\n        <sj-button\n          [variant]=\"variant\"\n          [useDensity]=\"useDensity\"\n          [useFullWidth]=\"useFullWidth\"\n          [useRounded]=\"useRounded\"\n          [usePaint]=\"usePaint\"\n          [sj]=\"sj\"\n        >\n          Button Playground\n        </sj-button>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'flat',\n    usePaint: 'none',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<sj-card [variant]=\"variant\" [usePaint]=\"usePaint\" [usePadding]=\"usePadding\" [useRounded]=\"useRounded\" [sj]=\"sj\">Card Content</sj-card>`,\n  }),\n}"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    component: 'section',\n    host: false,\n    useCol: false,\n    useWrap: false,\n    useInline: false,\n    useCenter: false,\n    useBetween: false,\n    useAround: false,\n    useEvenly: false,\n    useGap: 'none',\n    usePadding: 'none',\n    playgroundSj: {} as SjInput | undefined,\n  },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex\n        [component]=\"component\"\n        [host]=\"host\"\n        [useCol]=\"useCol\"\n        [useWrap]=\"useWrap\"\n        [useInline]=\"useInline\"\n        [useCenter]=\"useCenter\"\n        [useBetween]=\"useBetween\"\n        [useAround]=\"useAround\"\n        [useEvenly]=\"useEvenly\"\n        [useGap]=\"useGap\"\n        [usePadding]=\"usePadding\"\n        [sj]=\"playgroundSj\"\n      >\n        <div [sj]=\"[ sj.p(0.5), sj.c('primary.contrast'), sj.bg('primary'), sj.brad(0.5) ]\">A</div>\n        <div [sj]=\"[ sj.padding(0.5),  sj.color('secondary.contrast'), sj.backgroundColor('secondary'), sj.brad(0.5) ]\">B</div>\n        <div [sj]=\"{padding:0.5, color:'info.contrast', backgroundColor:'info', borderRadius:0.5}\">C</div>\n      </sj-flex>\n    `,\n  }),\n}"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: icon.superJson,\n    size: '2rem',\n    fill: undefined,\n    stroke: undefined,\n    fillOpacity: undefined,\n    strokeOpacity: undefined,\n    sj: [sj.c('primary.main')],\n  },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <div [sj]=\"[ sj.d('flex'), sj.fxAItems('center'), sj.gap(0.5) ]\">\n        <sj-icon [name]=\"name\" [size]=\"size\" [fill]=\"fill\" [stroke]=\"stroke\" [fillOpacity]=\"fillOpacity\" [strokeOpacity]=\"strokeOpacity\" [sj]=\"sj\"></sj-icon>\n        <span [sj]=\"[ sj.c('neutral.dark') ]\">{{ name }}</span>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'outlined',\n    type: 'text',\n    placeholder: 'Your email',\n    value: '',\n    usePadding: 'default',\n    useRounded: 'default',\n    usePaint: 'none',\n    fullWidth: false,\n    disabled: false,\n    invalid: false,\n  },\n  render: (args) => ({\n    props: { ...args },\n    template: `\n      <div style=\"max-width: 360px;\">\n        <sj-input\n          [variant]=\"variant\"\n          [type]=\"type\"\n          [placeholder]=\"placeholder\"\n          [value]=\"value\"\n          (valueChange)=\"value = $event\"\n          [usePadding]=\"usePadding\"\n          [useRounded]=\"useRounded\"\n          [usePaint]=\"usePaint\"\n          [fullWidth]=\"fullWidth\"\n          [disabled]=\"disabled\"\n          [invalid]=\"invalid\"\n        ></sj-input>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Playground",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-paper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    variant: 'outlined',\n    component: 'div',\n    usePaint: 'none',\n    usePadding: 'default',\n    useRounded: 'default',\n    playgroundSj: {} as SjInput | undefined,\n  },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-paper\n        [variant]=\"variant\"\n        [component]=\"component\"\n        [usePaint]=\"usePaint\"\n        [usePadding]=\"usePadding\"\n        [useRounded]=\"useRounded\"\n        [sj]=\"playgroundSj ?? [ sj.bg('light.light'), sj.c('dark.contrast') ]\"\n      >\n        Paper Playground\n      </sj-paper>\n    `,\n  }),\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    controls: {\n      matchers: {\n       color: /(background|color)$/i,\n       date: /Date$/i,\n      },\n    },\n    options: {\n      storySort: {\n        order: [\n          'SJ',\n          [\n            '[sj] Basic',\n            '[sj] Basic + Shortcuts',\n            'sjRootApi Basic',\n            'sjRootApi + Theming & Tokens',\n            'Typography',\n            'Flex',\n            'Paper',\n            'Card',\n            'Button',\n          ],\n        ],\n      },\n    },\n  },\n}"
            },
            {
                "name": "PropsAndShorthands",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Properties & shorthands (inline array)',\n  render: () => ({\n    props: { sj },\n    template: `\n      <div [sj]=\"[ sj.padding('16px'), sj.backgroundColor('#f7f7f7'), sj.color('#333'), sj.brad('8px') ]\">\n        padding:16px, bg:#f7f7f7, color:#333, radius:8px\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "QuickLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Quick layout (d/flex + fx*)',\n  render: () => ({\n    template: `\n      <div [sj]=\"{ d: 'flex', fxDir: 'row', fxJustify: 'space-between', fxAItems: 'center', gap: '8px', bg: '#f0f0f0', p: '8px', brad: '6px' }\">\n        <div [sj]=\"{ bg: '#ccc', p: '4px', brad: '4px' }\">A</div>\n        <div [sj]=\"{ bg: '#ccc', p: '4px', brad: '4px' }\">B</div>\n        <div [sj]=\"{ bg: '#ccc', p: '4px', brad: '4px' }\">C</div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "ResponsiveLonghand",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Responsive (longhand CSS functions)',\n  render: () => ({\n    props: { sj },\n    template: `\n      <div [sj]=\"[ sj.padding({ xs: '8px', md: '16px' }), sj.backgroundColor('#eee'), sj.brad('8px') ]\">\n        padding: xs 8px → md 16px (sj.padding responsive object)\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "ResponsiveOverride",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { useGap: 'default' },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [useGap]=\"useGap\" [sj]=\"[ sj.gap({ xs: .25, md: .75 }) ]\">\n        <div [sj]=\"[ sj.p(0.3), sj.bg('primary.light'), sj.brad(0.5) ]\">xs/md gap override</div>\n        <div [sj]=\"[ sj.p(0.3), sj.bg('secondary.light'), sj.brad(0.5) ]\">(sj.gap wins)</div>\n      </sj-flex>\n    `,\n  }),\n}"
            },
            {
                "name": "ResponsivePadding",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Padding (responsive object)',\n  render: () => ({\n    props: {},\n    template: `\n      <div [sj]=\"{\n        padding: { xs: '16px', sm: '24px', md: '32px' },\n        backgroundColor: '#f7f7f7',\n        borderRadius: '8px'\n      }\">\n        div with responsive padding: xs=16px, sm=24px, md=32px\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "ResponsiveShorthands",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Responsive shorthands',\n  render: () => ({\n    template: `\n      <div [sj]=\"{\n        p: { xs: '8px', md: '16px' },\n        brad: { xs: '4px', md: '8px' },\n        bg: '#f7f7f7'\n      }\">\n        p: xs 8px → md 16px, brad: xs 4px → md 8px\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "ShorthandsSimple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Shorthands (simple object)',\n  render: () => ({\n    template: `\n      <div [sj]=\"{ bg: '#036', c: '#fff', p: '12px', brad: '8px' }\">\n        bg:#036, c:#fff, p:12px, brad:8px\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Single",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { variant: 'h4', sj: { color: 'dark' } },\n  render: (args) => ({\n    props: args,\n    template: `<sj-typography [variant]=\"variant\" [sj]=\"sj\">Typography {{ variant }}</sj-typography>`,\n  }),\n}"
            },
            {
                "name": "SpacingAxes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Spacing axes (px/py/m)',\n  render: () => ({\n    template: `\n      <div [sj]=\"{ px: '16px', py: '8px', m: '4px', bg: '#f7f7f7', brad: '6px' }\">\n        px:16px, py:8px, m:4px\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "TokensAndOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-root-api-tokens.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Tokens & .options',\n  render: () => ({\n    props: { sj },\n    template: `\n      <div [sj]=\"[\n        sj.bg(sj.bg.options.primary.main),\n        sj.c(sj.c.options.primary.contrast),\n        sj.p('12px'),\n        sj.brad('8px')\n      ]\">\n        Using palette tokens via .options (primary.main / primary.contrast)\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "Variants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { placeholder: 'Placeholder' },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <div [sj]=\"[ sj.d('flex'), sj.fxDir('column'), sj.gap(0.5), sj.w('320px') ]\">\n        <sj-input variant=\"outlined\" usePadding=\"default\" useRounded=\"default\" [placeholder]=\"placeholder\"></sj-input>\n        <sj-input variant=\"filled\" usePaint=\"primary\" usePadding=\"default\" useRounded=\"default\" [placeholder]=\"placeholder\"></sj-input>\n        <sj-input variant=\"flat\" [placeholder]=\"placeholder\"></sj-input>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithErrorMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    id: 'error-input',\n    placeholder: 'Your email',\n    invalid: true,\n    ariaDescribedby: 'error-message',\n  },\n  render: (args) => ({\n    props: { ...args },\n    template: `\n      <div style=\"max-width: 360px; display: flex; flex-direction: column; gap: 0.5rem;\">\n        <label for=\"error-input\">Email Address</label>\n        <sj-input\n          [id]=\"id\"\n          [placeholder]=\"placeholder\"\n          [invalid]=\"invalid\"\n          [ariaDescribedby]=\"ariaDescribedby\"\n        ></sj-input>\n        <div id=\"error-message\" style=\"color: red; font-size: 0.875rem;\">This field is required.</div>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    id: 'my-input',\n    placeholder: 'Your email',\n  },\n  render: (args) => ({\n    props: { ...args },\n    template: `\n      <div style=\"max-width: 360px; display: flex; flex-direction: column; gap: 0.5rem;\">\n        <label for=\"my-input\">Email Address</label>\n        <sj-input\n          [id]=\"id\"\n          [placeholder]=\"placeholder\"\n        ></sj-input>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WithPrefixSuffix",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { placeholder: 'Search...' },\n  render: (args) => ({\n    props: { ...args, sj, icon },\n    template: `\n      <div style=\"max-width: 360px;\">\n        <sj-input variant=\"outlined\" usePadding=\"default\" useRounded=\"default\" [placeholder]=\"placeholder\">\n          <sj-icon prefix [name]=\"icon.superJson\" size=\"1rem\" [sj]=\"[ sj.mr(0.25) ]\"></sj-icon>\n          <span suffix [sj]=\"[ sj.c('neutral.dark') ]\">&#64;</span>\n        </sj-input>\n      </div>\n    `,\n  }),\n}"
            },
            {
                "name": "WrapAndInline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: { useWrap: true, useInline: true, useGap: 'default' },\n  render: (args) => ({\n    props: {\n      ...args,\n      sj,\n      numbers: Array.from({ length: 40 }, (_, i) => i + 1),\n    },\n    template: `\n      <sj-flex [useWrap]=\"useWrap\" [useInline]=\"useInline\" [useGap]=\"useGap\" [sj]=\"[ sj.bg('light.light') ]\">\n        <div *ngFor=\"let n of numbers\" [sj]=\"[ sj.p(0.3), sj.bg('neutral.light'), sj.mr(0.3), sj.mb(0.3) ]\">{{ n }}</div>\n      </sj-flex>\n    `,\n  }),\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj",
                "file": "projects/super-jss/src/stories/sj-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SjCardComponent>",
                "file": "projects/super-jss/src/stories/sj-card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj",
                "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj",
                "file": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj",
                "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj",
                "file": "projects/super-jss/src/stories/sj-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj",
                "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj",
                "file": "projects/super-jss/src/stories/sj-paper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj",
                "file": "projects/super-jss/src/stories/sj-root-api-tokens.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj",
                "file": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SjTypographyComponent>",
                "file": "projects/super-jss/src/stories/sj-typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/super-jss/src/stories/sj-icon.stories.ts": [
                {
                    "name": "Accessibility",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    props: { sj, icon },\n    template: `\n      <div [sj]=\"[ sj.d('flex'), sj.fxDir('column'), sj.gap(1) ]\">\n        <div>\n          <p>This icon is decorative and is hidden from screen readers:</p>\n          <sj-icon [name]=\"icon.sun\"></sj-icon>\n        </div>\n        <div>\n          <p>This icon has a label and is announced by screen readers:</p>\n          <sj-icon [name]=\"icon.moon\" label=\"Moon icon\"></sj-icon>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "AllIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    props: { sj, iconNames: Object.values(icon) },\n    template: `\n      <div [sj]=\"[ sj.d('grid'), sj.gridTemplateColumns('repeat(auto-fit, minmax(140px, 1fr))'), sj.gap(0.75) ]\">\n        <div *ngFor=\"let n of iconNames\" [sj]=\"[ sj.d('flex'), sj.fxDir('column'), sj.fxAItems('center'), sj.gap(0.25), sj.p(0.5), sj.bg('light.light'), sj.brad(0.5) ]\">\n          <sj-icon [name]=\"n\" size=\"2rem\"></sj-icon>\n          <code [sj]=\"[ sj.fs('0.8rem'), sj.c('neutral.dark') ]\">{{ n }}</code>\n        </div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'SJ/Icon',\n  component: SjIconComponent as any,\n  decorators: [moduleMetadata({ imports: [SjIconComponent, SjDirective] })],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          '<sj-icon> renders theme-aware SVG icons. Size is controlled by the host via `size` (px/rem). Colors accept palette tokens or raw CSS.',\n      },\n    },\n  },\n  argTypes: {\n    name: { control: 'select', options: Object.values(icon) as any },\n    size: { control: 'text', table: { type: { summary: 'string | number' } } },\n    fill: { control: 'text' },\n    stroke: { control: 'text' },\n    fillOpacity: { control: { type: 'number', min: 0, max: 1, step: 0.05 } },\n    strokeOpacity: { control: { type: 'number', min: 0, max: 1, step: 0.05 } },\n    sj: { control: 'object' },\n  },\n}"
                },
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: icon.superJson,\n    size: '2rem',\n    fill: undefined,\n    stroke: undefined,\n    fillOpacity: undefined,\n    strokeOpacity: undefined,\n    sj: [sj.c('primary.main')],\n  },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <div [sj]=\"[ sj.d('flex'), sj.fxAItems('center'), sj.gap(0.5) ]\">\n        <sj-icon [name]=\"name\" [size]=\"size\" [fill]=\"fill\" [stroke]=\"stroke\" [fillOpacity]=\"fillOpacity\" [strokeOpacity]=\"strokeOpacity\" [sj]=\"sj\"></sj-icon>\n        <span [sj]=\"[ sj.c('neutral.dark') ]\">{{ name }}</span>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/super-jss/src/stories/sj-flex.stories.ts": [
                {
                    "name": "Alignment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {},\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [sj]=\"[{ justifyContent: 'space-between', alignItems: 'center' }, sj.minH(6), sj.p(0.5) ]\">\n        <div [sj]=\"[ sj.p(0.5), sj.bg('primary.light'), sj.brad(0.5) ]\">Left</div>\n        <div [sj]=\"[ sj.p(0.5), sj.bg('secondary.light'), sj.brad(0.5) ]\">Right</div>\n      </sj-flex>\n    `,\n  }),\n}"
                },
                {
                    "name": "BasicRow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    playgroundSj: {\n      padding: '2px',\n    },\n  },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [sj]=\"[ sj.p(3) ]\">\n        <div [sj]=\"[ sj.p(0.5), sj.bg('primary.light'), sj.brad(0.5) ]\">One</div>\n        <div [sj]=\"[ sj.p(0.5), sj.bg('secondary.light'), sj.brad(0.5) ]\">Two</div>\n      </sj-flex>\n    `,\n  }),\n}"
                },
                {
                    "name": "ColumnCentered",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { useCol: true, useCenter: true, useGap: 'default' },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [useCol]=\"useCol\" [useCenter]=\"useCenter\" [useGap]=\"useGap\">\n        <div [sj]=\"[ sj.p(0.5), sj.bg('primary.light'), sj.brad(0.5) ]\">One</div>\n        <div [sj]=\"[ sj.p(0.5), sj.bg('secondary.light'), sj.brad(0.5) ]\">Two</div>\n      </sj-flex>\n    `,\n  }),\n}"
                },
                {
                    "name": "ComponentPolymorphism",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { component: 'section', useGap: 2 },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [component]=\"component\" [useGap]=\"useGap\" [sj]=\"[ sj.bg('light.light') ]\">\n        <div [sj]=\"[ sj.p(0.5), sj.bg('primary.light'), sj.brad(0.5) ]\">Section tag</div>\n        <div [sj]=\"[ sj.p(0.5), sj.bg('secondary.light'), sj.brad(0.5) ]\">With gap 2</div>\n      </sj-flex>\n    `,\n  }),\n}"
                },
                {
                    "name": "DensityGap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { useGap: 'comfortable' },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [useGap]=\"useGap\">\n        <div [sj]=\"[ sj.p(0.5), sj.bg('primary.light'), sj.brad(0.5) ]\">A</div>\n        <div [sj]=\"[ sj.p(0.5), sj.bg('secondary.light'), sj.brad(0.5) ]\">B</div>\n        <div [sj]=\"[ sj.p(0.5), sj.bg('info.light'), sj.brad(0.5) ]\">C</div>\n      </sj-flex>\n    `,\n  }),\n}"
                },
                {
                    "name": "DensityPadding",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { usePadding: 'compact' },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [usePadding]=\"usePadding\">\n        <div [sj]=\"[ sj.bg('primary.light') ]\">A</div>\n        <div [sj]=\"[ sj.bg('secondary.light') ]\">B</div>\n        <div [sj]=\"[ sj.bg('info.light') ]\">C</div>\n      </sj-flex>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'SJ/Flex',\n  component: SjFlexComponent as any,\n  parameters: {\n    docs: {\n      description: {\n        component:\n          'A powerful and flexible layout component. Use the `use*` inputs for common flexbox patterns and density adjustments. For fine-grained control, including responsive layouts and properties like `justifyContent` or `alignItems`, use the `[sj]` input.',\n      },\n    },\n  },\n  decorators: [moduleMetadata({ imports: [SjDirective] })],\n  argTypes: {\n    component: {\n      control: 'select',\n      options: ['div', 'section', 'article', 'span'],\n    },\n    host: { control: 'boolean' },\n    useCol: { control: 'boolean' },\n    useWrap: { control: 'boolean' },\n    useInline: { control: 'boolean' },\n    useCenter: { control: 'boolean' },\n    useBetween: { control: 'boolean' },\n    useAround: { control: 'boolean' },\n    useEvenly: { control: 'boolean' },\n\n    useGap: {\n      control: 'select',\n      options: [\n        undefined,\n        'none',\n        1,\n        2,\n        3,\n        4,\n        'compact',\n        'default',\n        'comfortable',\n        'spacious',\n      ],\n    },\n    usePadding: {\n      control: 'select',\n      options: [\n        undefined,\n        'none',\n        1,\n        2,\n        3,\n        4,\n        'compact',\n        'default',\n        'comfortable',\n        'spacious',\n      ],\n    },\n    // Playground-only: allow testing the [sj] input with object or array\n    playgroundSj: {\n      control: 'object',\n      description:\n        'Use this to pass any style object to the component. This is the primary way to apply detailed styles like `justifyContent`, `alignItems`, or responsive values. E.g., `{ justifyContent: \"flex-end\" }`.',\n      table: {\n        category: 'Playground',\n        type: { summary: 'SjStyle | SjStyle[]' },\n      },\n    },\n  },\n}"
                },
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    component: 'section',\n    host: false,\n    useCol: false,\n    useWrap: false,\n    useInline: false,\n    useCenter: false,\n    useBetween: false,\n    useAround: false,\n    useEvenly: false,\n    useGap: 'none',\n    usePadding: 'none',\n    playgroundSj: {} as SjInput | undefined,\n  },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex\n        [component]=\"component\"\n        [host]=\"host\"\n        [useCol]=\"useCol\"\n        [useWrap]=\"useWrap\"\n        [useInline]=\"useInline\"\n        [useCenter]=\"useCenter\"\n        [useBetween]=\"useBetween\"\n        [useAround]=\"useAround\"\n        [useEvenly]=\"useEvenly\"\n        [useGap]=\"useGap\"\n        [usePadding]=\"usePadding\"\n        [sj]=\"playgroundSj\"\n      >\n        <div [sj]=\"[ sj.p(0.5), sj.c('primary.contrast'), sj.bg('primary'), sj.brad(0.5) ]\">A</div>\n        <div [sj]=\"[ sj.padding(0.5),  sj.color('secondary.contrast'), sj.backgroundColor('secondary'), sj.brad(0.5) ]\">B</div>\n        <div [sj]=\"{padding:0.5, color:'info.contrast', backgroundColor:'info', borderRadius:0.5}\">C</div>\n      </sj-flex>\n    `,\n  }),\n}"
                },
                {
                    "name": "ResponsiveOverride",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { useGap: 'default' },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-flex [useGap]=\"useGap\" [sj]=\"[ sj.gap({ xs: .25, md: .75 }) ]\">\n        <div [sj]=\"[ sj.p(0.3), sj.bg('primary.light'), sj.brad(0.5) ]\">xs/md gap override</div>\n        <div [sj]=\"[ sj.p(0.3), sj.bg('secondary.light'), sj.brad(0.5) ]\">(sj.gap wins)</div>\n      </sj-flex>\n    `,\n  }),\n}"
                },
                {
                    "name": "WrapAndInline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { useWrap: true, useInline: true, useGap: 'default' },\n  render: (args) => ({\n    props: {\n      ...args,\n      sj,\n      numbers: Array.from({ length: 40 }, (_, i) => i + 1),\n    },\n    template: `\n      <sj-flex [useWrap]=\"useWrap\" [useInline]=\"useInline\" [useGap]=\"useGap\" [sj]=\"[ sj.bg('light.light') ]\">\n        <div *ngFor=\"let n of numbers\" [sj]=\"[ sj.p(0.3), sj.bg('neutral.light'), sj.mr(0.3), sj.mb(0.3) ]\">{{ n }}</div>\n      </sj-flex>\n    `,\n  }),\n}"
                }
            ],
            "projects/super-jss/src/stories/sj-typography.stories.ts": [
                {
                    "name": "AllVariants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display:flex; flex-direction:column; gap:8px\">\n        <sj-typography variant=\"h1\">Heading 1</sj-typography>\n        <sj-typography variant=\"h2\">Heading 2</sj-typography>\n        <sj-typography variant=\"h3\">Heading 3</sj-typography>\n        <sj-typography variant=\"h4\">Heading 4</sj-typography>\n        <sj-typography variant=\"h5\">Heading 5</sj-typography>\n        <sj-typography variant=\"h6\">Heading 6</sj-typography>\n        <sj-typography variant=\"p\">Paragraph text</sj-typography>\n        <sj-typography variant=\"span\">Span text</sj-typography>\n        <sj-typography variant=\"strong\">Strong text</sj-typography>\n        <sj-typography variant=\"small\">Small text</sj-typography>\n        <sj-typography variant=\"pre\">preformatted</sj-typography>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SjTypographyComponent>",
                    "defaultValue": "{\n  title: 'SJ/Typography',\n  component: SjTypographyComponent,\n  argTypes: {\n    variant: { control: 'select', options: ['h1','h2','h3','h4','h5','h6','p','span','strong','small','pre','body'] },\n    sj: { control: 'object' },\n  },\n}"
                },
                {
                    "name": "Single",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { variant: 'h4', sj: { color: 'dark' } },\n  render: (args) => ({\n    props: args,\n    template: `<sj-typography [variant]=\"variant\" [sj]=\"sj\">Typography {{ variant }}</sj-typography>`,\n  }),\n}"
                }
            ],
            "projects/super-jss/src/stories/sj-directive-basics.stories.ts": [
                {
                    "name": "ClassPropertySjStyle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Class property (SjStyle)',\n  render: () => ({ props: {}, template: `<story-sj-basic-class></story-sj-basic-class>` }),\n  parameters: { docs: { disable: true } },\n}"
                },
                {
                    "name": "ClassPropertySjStyleArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Class property (SjStyle[])',\n  render: () => ({ props: {}, template: `<story-sj-basic-array></story-sj-basic-array>` }),\n  parameters: { docs: { disable: true } },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'SJ/[sj] Basic',\n  decorators: [\n    moduleMetadata({\n      imports: [\n        SjDirective,\n        SjBasicClassExampleComponent,\n        SjBasicArrayExampleComponent,\n      ],\n    }),\n  ],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          '[sj] is a lightweight Angular directive that lets you author styles as plain JavaScript objects directly in your templates.\\n\\nKey ideas:\\n- Use camelCase CSS properties (e.g., padding, backgroundColor).\\n- Values can be raw CSS (px, rem, hex) or theme tokens — start with raw CSS here.\\n- Inline or class property: bind a literal object, or a component field typed as `SjStyle` or `SjStyle[]`.\\n- You can pass a single object, an array of objects (merged left→right), or responsive objects like { xs, sm, md, ... }.\\n- The library generates tiny atomic CSS classes at runtime; no global CSS needed.\\n\\nThese first examples avoid theming to show the most basic form.',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "Padding",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Padding (simple object)',\n  render: () => ({\n    props: {},\n    template: `\n      <div [sj]=\"{ padding: '24px', backgroundColor: '#f7f7f7', borderRadius: '8px' }\">\n        div with padding: 24px (plain CSS units)\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "ResponsivePadding",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Padding (responsive object)',\n  render: () => ({\n    props: {},\n    template: `\n      <div [sj]=\"{\n        padding: { xs: '16px', sm: '24px', md: '32px' },\n        backgroundColor: '#f7f7f7',\n        borderRadius: '8px'\n      }\">\n        div with responsive padding: xs=16px, sm=24px, md=32px\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/super-jss/src/stories/sj-button.stories.ts": [
                {
                    "name": "Filled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { variant: 'filled', useDensity: 2 },\n  render: (args) => ({\n    props: args,\n    template: `<sj-button [variant]=\"variant\" [useDensity]=\"useDensity\">Click me</sj-button>`,\n  }),\n}"
                },
                {
                    "name": "Flat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { variant: 'flat', useDensity: 2 },\n  render: (args) => ({\n    props: args,\n    template: `<sj-button [variant]=\"variant\" [useDensity]=\"useDensity\">Flat</sj-button>`,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'SJ/Button',\n  component: SjButtonComponent as any,\n  decorators: [moduleMetadata({ imports: [SjDirective] })],\n  argTypes: {\n    variant: { control: 'select', options: ['filled', 'outlined', 'flat'] },\n    useDensity: { control: { type: 'number', min: 1, max: 4, step: 1 } },\n    useFullWidth: { control: 'boolean' },\n    useRounded: { control: 'select', options: [1, 2, 3, 4, 'compact', 'default', 'comfortable', 'spacious', 'none'] },\n    usePaint: { control: 'select', options: ['primary', 'secondary', 'success', 'info', 'warning', 'error', 'dark', 'neutral', 'light', 'auto', 'none'] },\n    sj: {\n      control: 'object',\n      table: { type: { summary: 'SjStyle | SjStyle[]' } },\n    },\n  },\n}"
                },
                {
                    "name": "Outlined",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { variant: 'outlined', useDensity: 2 },\n  render: (args) => ({\n    props: args,\n    template: `<sj-button [variant]=\"variant\" [useDensity]=\"useDensity\">Outlined</sj-button>`,\n  }),\n}"
                },
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'filled',\n    useDensity: 2,\n    useFullWidth: false,\n    useRounded: 2,\n    usePaint: 'auto',\n    sj: undefined,\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div style=\"width: 20rem\">\n        <sj-button\n          [variant]=\"variant\"\n          [useDensity]=\"useDensity\"\n          [useFullWidth]=\"useFullWidth\"\n          [useRounded]=\"useRounded\"\n          [usePaint]=\"usePaint\"\n          [sj]=\"sj\"\n        >\n          Button Playground\n        </sj-button>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/super-jss/src/stories/sj-paper.stories.ts": [
                {
                    "name": "Flat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-paper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { variant: 'flat', usePadding: 'default', useRounded: 'default' },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `<sj-paper [variant]=\"variant\" [usePadding]=\"usePadding\" [useRounded]=\"useRounded\">Flat paper</sj-paper>`,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-paper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'SJ/Paper',\n  component: SjPaperComponent as any,\n  argTypes: {\n    variant: {\n      control: 'select',\n      options: ['default', 'flat', 'outlined', 'filled'],\n    },\n    component: { control: 'select', options: ['div', 'section', 'article'] },\n    usePaint: {\n      control: 'select',\n      options: [\n        'none',\n        'auto',\n        'primary',\n        'secondary',\n        'success',\n        'info',\n        'warning',\n        'error',\n        'dark',\n        'neutral',\n        'light',\n      ],\n      table: {\n        category: 'Surface',\n        type: { summary: `'none' | 'auto' | palette family` },\n      },\n      description:\n        'Full paint override. For subtle tints prefer [useBg] or future useTint.',\n    },\n    usePadding: {\n      control: 'select',\n      options: [\n        'none',\n        'compact',\n        'default',\n        'comfortable',\n        'spacious',\n        1,\n        2,\n        3,\n        4,\n      ],\n    },\n    useRounded: {\n      control: 'select',\n      options: [\n        'none',\n        'compact',\n        'default',\n        'comfortable',\n        'spacious',\n        1,\n        2,\n        3,\n        4,\n      ],\n    },\n    playgroundSj: {\n      control: 'object',\n      description:\n        'Use this to pass any style object to the component for live testing. This input always has the final say in styling.',\n      table: {\n        category: 'Playground',\n        type: { summary: 'SjStyle | SjStyle[]' },\n      },\n    },\n    // Colors are set via [sj] (e.g., sj.bg('primary.light'), sj.c('primary.contrast'))\n  },\n}"
                },
                {
                    "name": "Outlined",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-paper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'outlined',\n    usePaint: 'none',\n    usePadding: 'comfortable',\n    useRounded: 'comfortable',\n  },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `<sj-paper [variant]=\"variant\" [usePaint]=\"usePaint\" [usePadding]=\"usePadding\" [useRounded]=\"useRounded\">Outlined paper</sj-paper>`,\n  }),\n}"
                },
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-paper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'outlined',\n    component: 'div',\n    usePaint: 'none',\n    usePadding: 'default',\n    useRounded: 'default',\n    playgroundSj: {} as SjInput | undefined,\n  },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <sj-paper\n        [variant]=\"variant\"\n        [component]=\"component\"\n        [usePaint]=\"usePaint\"\n        [usePadding]=\"usePadding\"\n        [useRounded]=\"useRounded\"\n        [sj]=\"playgroundSj ?? [ sj.bg('light.light'), sj.c('dark.contrast') ]\"\n      >\n        Paper Playground\n      </sj-paper>\n    `,\n  }),\n}"
                }
            ],
            "projects/super-jss/src/stories/sj-card.stories.ts": [
                {
                    "name": "InteractiveAccessibility",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: () => ({\n    template: `\n      <div style=\"display: flex; gap: 1rem;\">\n        <a href=\"#\" style=\"text-decoration: none; color: inherit;\">\n          <sj-card variant=\"interactive\" usePadding=\"default\" useRounded=\"default\">\n            <h3>Navigational Card</h3>\n            <p>This card is wrapped in an anchor tag and navigates on click.</p>\n          </sj-card>\n        </a>\n        <sj-card variant=\"interactive\" usePadding=\"default\" useRounded=\"default\" role=\"button\" tabindex=\"0\" (click)=\"onClick()\">\n          <h3>Action Card</h3>\n          <p>This card has a role of \"button\" and a click handler.</p>\n        </sj-card>\n      </div>\n    `,\n    props: {\n      onClick: () => alert('Card clicked!'),\n    },\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SjCardComponent>",
                    "defaultValue": "{\n  title: 'SJ/Card',\n  component: SjCardComponent,\n  argTypes: {\n    variant: { control: 'select', options: ['flat', 'outlined', 'elevated', 'interactive'] },\n    usePaint: {\n      control: 'select',\n      options: ['none', 'auto', 'primary', 'secondary', 'success', 'info', 'warning', 'error', 'dark', 'neutral', 'light'],\n    },\n    usePadding: { control: 'select', options: [undefined, 'none', 1, 2, 3, 4, 'compact', 'default', 'comfortable', 'spacious'] },\n    useRounded: { control: 'select', options: [undefined, 'none', 1, 2, 3, 4, 'compact', 'default', 'comfortable', 'spacious'] },\n    sj: { control: 'object' },\n  },\n}"
                },
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'flat',\n    usePaint: 'none',\n  },\n  render: (args) => ({\n    props: args,\n    template: `<sj-card [variant]=\"variant\" [usePaint]=\"usePaint\" [usePadding]=\"usePadding\" [useRounded]=\"useRounded\" [sj]=\"sj\">Card Content</sj-card>`,\n  }),\n}"
                }
            ],
            "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'SJ/[sj] Basic + Shortcuts',\n  decorators: [moduleMetadata({ imports: [SjDirective] })],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          'Popular shorthand keys for common CSS: p, px, py, m, mx, my, brad, bg, c, w, h, d, fxDir, fxJustify, fxAItems, gap.\\n' +\n          'Shorthands are authoring sugar — the generator outputs full CSS behind the scenes. These examples still use plain CSS values (no theming).',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "QuickLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Quick layout (d/flex + fx*)',\n  render: () => ({\n    template: `\n      <div [sj]=\"{ d: 'flex', fxDir: 'row', fxJustify: 'space-between', fxAItems: 'center', gap: '8px', bg: '#f0f0f0', p: '8px', brad: '6px' }\">\n        <div [sj]=\"{ bg: '#ccc', p: '4px', brad: '4px' }\">A</div>\n        <div [sj]=\"{ bg: '#ccc', p: '4px', brad: '4px' }\">B</div>\n        <div [sj]=\"{ bg: '#ccc', p: '4px', brad: '4px' }\">C</div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "ResponsiveShorthands",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Responsive shorthands',\n  render: () => ({\n    template: `\n      <div [sj]=\"{\n        p: { xs: '8px', md: '16px' },\n        brad: { xs: '4px', md: '8px' },\n        bg: '#f7f7f7'\n      }\">\n        p: xs 8px → md 16px, brad: xs 4px → md 8px\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "ShorthandsSimple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Shorthands (simple object)',\n  render: () => ({\n    template: `\n      <div [sj]=\"{ bg: '#036', c: '#fff', p: '12px', brad: '8px' }\">\n        bg:#036, c:#fff, p:12px, brad:8px\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "SpacingAxes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Spacing axes (px/py/m)',\n  render: () => ({\n    template: `\n      <div [sj]=\"{ px: '16px', py: '8px', m: '4px', bg: '#f7f7f7', brad: '6px' }\">\n        px:16px, py:8px, m:4px\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/super-jss/src/stories/sj-input.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'SJ/Input',\n  component: SjInputComponent as any,\n  decorators: [moduleMetadata({ imports: [SjPaperComponent, SjDirective, SjIconComponent] })],\n  argTypes: {\n    variant: { control: 'select', options: ['outlined', 'filled', 'flat'] },\n    type: { control: 'select', options: ['text', 'email', 'password', 'search', 'number', 'url'] },\n    placeholder: { control: 'text' },\n    value: { control: 'text' },\n    usePadding: {\n      control: 'select',\n      options: [undefined, 'none', 1, 2, 3, 4, 'compact', 'default', 'comfortable', 'spacious'],\n    },\n    useRounded: {\n      control: 'select',\n      options: [undefined, 'none', 1, 2, 3, 4, 'compact', 'default', 'comfortable', 'spacious'],\n    },\n    usePaint: {\n      control: 'select',\n      options: ['none', 'auto', 'primary', 'secondary', 'success', 'info', 'warning', 'error', 'dark', 'neutral', 'light'],\n    },\n    fullWidth: { control: 'boolean' },\n    disabled: { control: 'boolean' },\n    invalid: { control: 'boolean' },\n    sj: { control: 'object' },\n  },\n}"
                },
                {
                    "name": "Playground",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    variant: 'outlined',\n    type: 'text',\n    placeholder: 'Your email',\n    value: '',\n    usePadding: 'default',\n    useRounded: 'default',\n    usePaint: 'none',\n    fullWidth: false,\n    disabled: false,\n    invalid: false,\n  },\n  render: (args) => ({\n    props: { ...args },\n    template: `\n      <div style=\"max-width: 360px;\">\n        <sj-input\n          [variant]=\"variant\"\n          [type]=\"type\"\n          [placeholder]=\"placeholder\"\n          [value]=\"value\"\n          (valueChange)=\"value = $event\"\n          [usePadding]=\"usePadding\"\n          [useRounded]=\"useRounded\"\n          [usePaint]=\"usePaint\"\n          [fullWidth]=\"fullWidth\"\n          [disabled]=\"disabled\"\n          [invalid]=\"invalid\"\n        ></sj-input>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "Variants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { placeholder: 'Placeholder' },\n  render: (args) => ({\n    props: { ...args, sj },\n    template: `\n      <div [sj]=\"[ sj.d('flex'), sj.fxDir('column'), sj.gap(0.5), sj.w('320px') ]\">\n        <sj-input variant=\"outlined\" usePadding=\"default\" useRounded=\"default\" [placeholder]=\"placeholder\"></sj-input>\n        <sj-input variant=\"filled\" usePaint=\"primary\" usePadding=\"default\" useRounded=\"default\" [placeholder]=\"placeholder\"></sj-input>\n        <sj-input variant=\"flat\" [placeholder]=\"placeholder\"></sj-input>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithErrorMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    id: 'error-input',\n    placeholder: 'Your email',\n    invalid: true,\n    ariaDescribedby: 'error-message',\n  },\n  render: (args) => ({\n    props: { ...args },\n    template: `\n      <div style=\"max-width: 360px; display: flex; flex-direction: column; gap: 0.5rem;\">\n        <label for=\"error-input\">Email Address</label>\n        <sj-input\n          [id]=\"id\"\n          [placeholder]=\"placeholder\"\n          [invalid]=\"invalid\"\n          [ariaDescribedby]=\"ariaDescribedby\"\n        ></sj-input>\n        <div id=\"error-message\" style=\"color: red; font-size: 0.875rem;\">This field is required.</div>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    id: 'my-input',\n    placeholder: 'Your email',\n  },\n  render: (args) => ({\n    props: { ...args },\n    template: `\n      <div style=\"max-width: 360px; display: flex; flex-direction: column; gap: 0.5rem;\">\n        <label for=\"my-input\">Email Address</label>\n        <sj-input\n          [id]=\"id\"\n          [placeholder]=\"placeholder\"\n        ></sj-input>\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "WithPrefixSuffix",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: { placeholder: 'Search...' },\n  render: (args) => ({\n    props: { ...args, sj, icon },\n    template: `\n      <div style=\"max-width: 360px;\">\n        <sj-input variant=\"outlined\" usePadding=\"default\" useRounded=\"default\" [placeholder]=\"placeholder\">\n          <sj-icon prefix [name]=\"icon.superJson\" size=\"1rem\" [sj]=\"[ sj.mr(0.25) ]\"></sj-icon>\n          <span suffix [sj]=\"[ sj.c('neutral.dark') ]\">&#64;</span>\n        </sj-input>\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/super-jss/src/stories/sj-root-api-tokens.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-root-api-tokens.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'SJ/sjRootApi + Theming & Tokens',\n  decorators: [moduleMetadata({ imports: [SjDirective] })],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          'Use theme palette tokens and `.options` for discoverable, theme-aware styling. Also shows sj.compose for merging style parts.',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "TokensAndOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-root-api-tokens.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Tokens & .options',\n  render: () => ({\n    props: { sj },\n    template: `\n      <div [sj]=\"[\n        sj.bg(sj.bg.options.primary.main),\n        sj.c(sj.c.options.primary.contrast),\n        sj.p('12px'),\n        sj.brad('8px')\n      ]\">\n        Using palette tokens via .options (primary.main / primary.contrast)\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/super-jss/src/stories/sj-root-api.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta",
                    "defaultValue": "{\n  title: 'SJ/sjRootApi Basic',\n  decorators: [moduleMetadata({ imports: [SjDirective] })],\n  parameters: {\n    docs: {\n      description: {\n        component:\n          'The `sj` root API exposes every CSS property as a typed function and a small set of curated shorthands.\\n' +\n          'Use it inline for great IDE autocomplete in Angular templates. These basic examples use plain CSS values (no theming).',\n      },\n    },\n  },\n}"
                },
                {
                    "name": "MixingFunctionsAndObjects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Mixing sj.* and literal objects',\n  render: () => ({\n    props: { sj },\n    template: `\n      <div [sj]=\"[ sj.padding('12px'), { backgroundColor: 'red', marginTop: '2px', borderRadius: '6px', color: '#fff' } ]\">\n        [sj] can take an array mixing sj.* helpers and plain objects\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "PropsAndShorthands",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Properties & shorthands (inline array)',\n  render: () => ({\n    props: { sj },\n    template: `\n      <div [sj]=\"[ sj.padding('16px'), sj.backgroundColor('#f7f7f7'), sj.color('#333'), sj.brad('8px') ]\">\n        padding:16px, bg:#f7f7f7, color:#333, radius:8px\n      </div>\n    `,\n  }),\n}"
                },
                {
                    "name": "ResponsiveLonghand",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Responsive (longhand CSS functions)',\n  render: () => ({\n    props: { sj },\n    template: `\n      <div [sj]=\"[ sj.padding({ xs: '8px', md: '16px' }), sj.backgroundColor('#eee'), sj.brad('8px') ]\">\n        padding: xs 8px → md 16px (sj.padding responsive object)\n      </div>\n    `,\n  }),\n}"
                }
            ],
            "projects/super-jss/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/super-jss/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    controls: {\n      matchers: {\n       color: /(background|color)$/i,\n       date: /Date$/i,\n      },\n    },\n    options: {\n      storySort: {\n        order: [\n          'SJ',\n          [\n            '[sj] Basic',\n            '[sj] Basic + Shortcuts',\n            'sjRootApi Basic',\n            'sjRootApi + Theming & Tokens',\n            'Typography',\n            'Flex',\n            'Paper',\n            'Card',\n            'Button',\n          ],\n        ],\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/super-jss/src/stories/sj-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj",
                    "file": "projects/super-jss/src/stories/sj-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/super-jss/src/stories/sj-card.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SjCardComponent>",
                    "file": "projects/super-jss/src/stories/sj-card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/super-jss/src/stories/sj-directive-basics.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj",
                    "file": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj",
                    "file": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/super-jss/src/stories/sj-flex.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj",
                    "file": "projects/super-jss/src/stories/sj-flex.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/super-jss/src/stories/sj-icon.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj",
                    "file": "projects/super-jss/src/stories/sj-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/super-jss/src/stories/sj-input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj",
                    "file": "projects/super-jss/src/stories/sj-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/super-jss/src/stories/sj-paper.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj",
                    "file": "projects/super-jss/src/stories/sj-paper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/super-jss/src/stories/sj-root-api-tokens.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj",
                    "file": "projects/super-jss/src/stories/sj-root-api-tokens.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/super-jss/src/stories/sj-root-api.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj",
                    "file": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/super-jss/src/stories/sj-typography.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SjTypographyComponent>",
                    "file": "projects/super-jss/src/stories/sj-typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/super-jss/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Filled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Flat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Outlined",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-button.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InteractiveAccessibility",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-card.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "SjBasicArrayExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "type": "component",
                "linktype": "component",
                "name": "SjBasicClassExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClassPropertySjStyle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClassPropertySjStyleArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Padding",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResponsivePadding",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-basics.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "QuickLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResponsiveShorthands",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ShorthandsSimple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SpacingAxes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-directive-shortcuts.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Alignment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicRow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColumnCentered",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ComponentPolymorphism",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DensityGap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DensityPadding",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResponsiveOverride",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WrapAndInline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-flex.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Accessibility",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-icon.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Variants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithErrorMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPrefixSuffix",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-input.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-paper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Flat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-paper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-paper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Outlined",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-paper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Playground",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-paper.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-root-api-tokens.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-root-api-tokens.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TokensAndOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-root-api-tokens.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MixingFunctionsAndObjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PropsAndShorthands",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ResponsiveLonghand",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-root-api.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllVariants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Single",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/super-jss/src/stories/sj-typography.stories.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Story",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}